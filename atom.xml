<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yittang</title>
  
  <subtitle>Just Do It</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-17T12:05:20.884Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yittang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>队列</title>
    <link href="http://yoursite.com/2017/12/17/%E9%98%9F%E5%88%97/"/>
    <id>http://yoursite.com/2017/12/17/队列/</id>
    <published>2017-12-17T10:28:31.000Z</published>
    <updated>2017-12-17T12:05:20.884Z</updated>
    
    <content type="html"><![CDATA[<h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><p>之前讲解了一下对于栈的概念以及用JS去实现一个<a href="http://yittang.cn/2017/12/16/%E6%A0%88/#more" target="_blank" rel="noopener">栈</a>的方法，那么今天再来介绍下与栈很相近的一个数据结构：队列。其实编程中的很多数据结构及理念都来源于生活，今天要讲的队列其实就是生活中的排队，谁先排进队伍，那么谁先受到服务，然后最先出列，这一点是跟栈截然相反的地方。队列是遵循FIFO(First In First Out)原则的一组有序的项，队列在尾部添加新元素，在顶部移除新元素。</p><h2 id="创建队列"><a href="#创建队列" class="headerlink" title="创建队列"></a>创建队列</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.items = []</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    enqueue(element) &#123;</span><br><span class="line">        <span class="keyword">this</span>.items.push(element)</span><br><span class="line">    &#125; <span class="comment">//尾部添加元素</span></span><br><span class="line"></span><br><span class="line">    dequeue() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.items.shift()</span><br><span class="line">    &#125; <span class="comment">//顶部移除元素</span></span><br><span class="line"></span><br><span class="line">    front() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="number">0</span>]</span><br><span class="line">    &#125; <span class="comment">//返回队列的第一个元素</span></span><br><span class="line"></span><br><span class="line">    isEmpty() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.items.length === <span class="number">0</span></span><br><span class="line">    &#125; <span class="comment">//队列是否为空</span></span><br><span class="line"></span><br><span class="line">    size() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.items.length</span><br><span class="line">    &#125; <span class="comment">//队列的长度</span></span><br><span class="line"></span><br><span class="line">    print() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.items.toString())</span><br><span class="line">    &#125; <span class="comment">//打印队列</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>队列中的方法跟之前介绍栈的方法都很相近，我相信只要你理解之前那篇<a href="http://yittang.cn/2017/12/16/%E6%A0%88/#more" target="_blank" rel="noopener">栈</a>，那么这段队列的方法，你也一定能理解，实在不懂，可以去翻看栈那篇文章。</strong></li></ul><p>我们生活中的队列当然不止普通的队列先进先出这种原则，当然还有特殊的队列，就如医院看病，一个生命垂危的病人和一个只是小病的病人相比，医院应当优先处理这个生命垂危的病人，而不是按照谁先来看病谁先就医，这样会出人命。所以队列也有这种特殊情况，这就是优先队列。</p><h2 id="创建优先队列"><a href="#创建优先队列" class="headerlink" title="创建优先队列"></a>创建优先队列</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueueElement</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(element, priority) &#123;</span><br><span class="line">        <span class="keyword">this</span>.element = element</span><br><span class="line">        <span class="keyword">this</span>.priority = priority</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PriorityQueue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.items = []</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    enqueue(element, priority) &#123;</span><br><span class="line">        <span class="keyword">let</span> isPriority = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">let</span> queueElement = <span class="keyword">new</span> QueueElement(element, priority)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="keyword">this</span>.items.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(queueElement.priority &lt; <span class="keyword">this</span>.items[i].priority) &#123;</span><br><span class="line">                <span class="keyword">this</span>.items.splice(i, <span class="number">0</span>, queueElement)</span><br><span class="line">                isPriority = <span class="literal">true</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!isPriority) &#123;</span><br><span class="line">            <span class="keyword">this</span>.items.push(queueElement)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dequeue() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.items.shift()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    front() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="number">0</span>]</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    isEmpty() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.items.length === <span class="number">0</span></span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    size() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.items.length</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    print() &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="keyword">this</span>.items.length; i++) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`第<span class="subst">$&#123;i&#125;</span>个队列<span class="subst">$&#123;<span class="keyword">this</span>.items[i].element&#125;</span>和其优先级是<span class="subst">$&#123;<span class="keyword">this</span>.items[i].priority&#125;</span>`</span>)  </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>优先队列的做法有两种：一种就是我上面这种，在push之前就判断优先级然后放入，这样在出队列的时候就不用再判断了；另一种就是push时不判断，在pop的时候判断它的优先级，有兴趣的话你可以试试。我就只介绍我的这种思路，如果新添加元素的priority小于原队列元素的priority的值，那么就把新元素插入在其前面。如果没有优先的机制，就正常push就行了。</strong></li></ul><p>除了以上两种队列，其实还有一种很好玩的队列：循环队列。我们应该都知道生活中一个游戏叫做击鼓传花，意思就是大家围成一个圈，从第一个人开始传花，接下去每个人接到这个花然后传下去，直到某一刻传花停止，花在谁手里谁就出局，直到人数为1时才算结束。接下来就是来模拟这种游戏效果。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pass</span>(<span class="params">nameList, num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> queue = <span class="keyword">new</span> Queue()</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;nameList.length; i++) &#123;</span><br><span class="line">        queue.enqueue(nameList[i])</span><br><span class="line">        <span class="built_in">console</span>.log(queue.items)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(queue.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> eliminated = <span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>; j&lt;num; j++) &#123;</span><br><span class="line">            queue.enqueue(queue.dequeue())</span><br><span class="line">        &#125;</span><br><span class="line">        eliminated = queue.dequeue()</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`此局淘汰者是：<span class="subst">$&#123;eliminated&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> queue.items          </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> names = [<span class="string">'John'</span>, <span class="string">'Li'</span>, <span class="string">'Mike'</span>, <span class="string">'Hei'</span>, <span class="string">'Mis'</span>]</span><br><span class="line"><span class="keyword">let</span> winner = Pass(names, <span class="number">7</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`最终获胜者是： <span class="subst">$&#123;winner&#125;</span>`</span>)</span><br></pre></td></tr></table></figure></p><ul><li><strong>首先我们需要第一种普通队列的类，我们接到一个玩游戏的名单，把它传入队列中，然后就是游戏开始，如果人数大于1，就一直传花下去，每次都要把一个人给淘汰出去，直到人数只有1个人的时候才是最后的胜利者。那么每次传花我们怎么才能算传几次来淘汰一个人呢？这时候就通过我们一开始输入的传花次数，一旦达到传花次数，那么当前这个人就被淘汰，如此循环下去。</strong></li></ul><hr><h1 id="如有帮助，请收藏本博客，谢谢！"><a href="#如有帮助，请收藏本博客，谢谢！" class="headerlink" title="如有帮助，请收藏本博客，谢谢！"></a><strong>如有帮助，请收藏本博客，谢谢！</strong></h1><p><img src="http://p0kkg0pkm.bkt.clouddn.com/17-12-7/4770802.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;队列&quot;&gt;&lt;a href=&quot;#队列&quot; class=&quot;headerlink&quot; title=&quot;队列&quot;&gt;&lt;/a&gt;队列&lt;/h1&gt;&lt;p&gt;之前讲解了一下对于栈的概念以及用JS去实现一个&lt;a href=&quot;http://yittang.cn/2017/12/16/%E6%A0%88
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer第十三题：调整数组顺序使奇数位于偶数前面</title>
    <link href="http://yoursite.com/2017/12/17/%E5%89%91%E6%8C%87-13/"/>
    <id>http://yoursite.com/2017/12/17/剑指-13/</id>
    <published>2017-12-17T10:04:57.000Z</published>
    <updated>2017-12-17T10:18:24.833Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h3 id="此系列为牛客网剑指Offer系列。"><a href="#此系列为牛客网剑指Offer系列。" class="headerlink" title="此系列为牛客网剑指Offer系列。"></a><strong>此系列为<a href="https://www.nowcoder.com/ta/coding-interviews" target="_blank" rel="noopener">牛客网剑指Offer系列</a>。</strong></h3><p>撰写此博文只为记录点滴与总结。</p><hr><h1 id="调整数组顺序使奇数位于偶数前面"><a href="#调整数组顺序使奇数位于偶数前面" class="headerlink" title="调整数组顺序使奇数位于偶数前面"></a>调整数组顺序使奇数位于偶数前面</h1><p>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。</p><ul><li><strong>这道题给了个无序的数组，也就是说我们并不清楚这个数组里面哪个位置是奇数，哪个是偶数，那么我就只能去遍历每个元素，然后做判断是奇还是偶，奇的存在一个新数组中，偶的存在另一个中，最后合并起来就呈现出我们需要的新数组了。</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reOrderArray</span>(<span class="params">array</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span>(array.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> arrLeft = [],</span><br><span class="line">        arrRight = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;array.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(array[i] % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            arrRight.push(array[i])</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            arrLeft.push(array[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    array = arrLeft.concat(arrRight)</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="如有帮助，请收藏本博客，谢谢！"><a href="#如有帮助，请收藏本博客，谢谢！" class="headerlink" title="如有帮助，请收藏本博客，谢谢！"></a><strong>如有帮助，请收藏本博客，谢谢！</strong></h1><p><img src="http://p0kkg0pkm.bkt.clouddn.com/17-12-7/4770802.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;h3 id=&quot;此系列为牛客网剑指Offer系列。&quot;&gt;&lt;a href=&quot;#此系列为牛客网剑指Offer系列。&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="剑指Offer系列" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87Offer%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>栈</title>
    <link href="http://yoursite.com/2017/12/16/%E6%A0%88/"/>
    <id>http://yoursite.com/2017/12/16/栈/</id>
    <published>2017-12-16T11:23:08.000Z</published>
    <updated>2017-12-16T12:33:02.833Z</updated>
    
    <content type="html"><![CDATA[<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p>今天就来讲讲栈的一些理解。对于什么叫栈，栈的诞生这些在网上可以自行去查阅，我就不再叙述。只要知道栈最明显的一个特点就是：<strong>后进先出</strong>，后进先出从字面上就是后进的元素会先出去，就像弹夹里面的子弹一样，后进的子弹在先进的子弹的上面，然后发射出去的是最后进的子弹。既然弹夹有弹夹底和弹夹头，那么栈也同样拥有，先进元素所在的一端就是栈底，后进元素所在的一端就是栈顶，只要清楚这个概念，基本上你也就能熟练使用栈了，如下图就是个简单的栈图。</p><p><img src="http://p0kkg0pkm.bkt.clouddn.com/17-12-16/76224544.jpg" alt=""></p><ul><li>光知道栈的这些简单的概念是不行的，我们需要用JS去实现出来！</li></ul><h2 id="创建栈"><a href="#创建栈" class="headerlink" title="创建栈"></a>创建栈</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Stack</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> items = [] <span class="comment">//用数组来表示这个栈</span></span><br><span class="line"><span class="comment">//各种属性和方法    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="向栈添加元素"><a href="#向栈添加元素" class="headerlink" title="向栈添加元素"></a>向栈添加元素</h2><ul><li>很简单，就是用数组里的push方法，往数组后添加元素。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> push = <span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">    items.push(element)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="从栈中移出元素"><a href="#从栈中移出元素" class="headerlink" title="从栈中移出元素"></a>从栈中移出元素</h2><ul><li>栈顶移除元素，就是数组中的pop方法。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pop = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    items.pop()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="查看栈顶的元素"><a href="#查看栈顶的元素" class="headerlink" title="查看栈顶的元素"></a>查看栈顶的元素</h2><ul><li>栈顶元素所在位置就是数组的最后一位<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> peek = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> items[items.length - <span class="number">1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="检查栈是否为空"><a href="#检查栈是否为空" class="headerlink" title="检查栈是否为空"></a>检查栈是否为空</h2><ul><li>栈的长度是否为零<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isEmpty = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> items.length === <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="清空栈"><a href="#清空栈" class="headerlink" title="清空栈"></a>清空栈</h2><ul><li>只要把栈重新赋个空值就行<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> clear = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    items = []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="打印栈内的元素"><a href="#打印栈内的元素" class="headerlink" title="打印栈内的元素"></a>打印栈内的元素</h2><ul><li>把栈内的元素转成字符串形势输出到控制台显示。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> print = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(items.toString())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.items = []</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  push(element) &#123;</span><br><span class="line">    <span class="keyword">this</span>.items.push(element)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  pop() &#123;</span><br><span class="line">    <span class="keyword">this</span>.items.pop()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  peek() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items[<span class="keyword">this</span>.items.length - <span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  isEmpty() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.items.length === <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  clear() &#123;</span><br><span class="line">    <span class="keyword">this</span>.items = []</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  print() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.items.toString())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h2><ul><li>十进制数转换成任意进制数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baseConverter</span>(<span class="params">decNumber, base</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> remStack = <span class="keyword">new</span> Stack(),</span><br><span class="line">        rem,</span><br><span class="line">        baseString = <span class="string">''</span>,</span><br><span class="line">        digits = <span class="string">'0123456789ABCDEF'</span></span><br><span class="line">    <span class="keyword">while</span> (decNumber &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        rem = <span class="built_in">Math</span>.floor(decNumber % base);</span><br><span class="line">        remStack.push(rem);</span><br><span class="line">        decNumber = <span class="built_in">Math</span>.floor(decNumber / base);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!remStack.isEmpty()) &#123;</span><br><span class="line">        baseString += digits[remStack.items.pop()]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> baseString</span><br><span class="line">  &#125;</span><br><span class="line"><span class="built_in">console</span>.log(baseConverter(<span class="number">10</span>,<span class="number">16</span>))</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="如有帮助，请收藏本博客，谢谢！"><a href="#如有帮助，请收藏本博客，谢谢！" class="headerlink" title="如有帮助，请收藏本博客，谢谢！"></a><strong>如有帮助，请收藏本博客，谢谢！</strong></h1><p><img src="http://p0kkg0pkm.bkt.clouddn.com/17-12-7/4770802.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;栈&quot;&gt;&lt;a href=&quot;#栈&quot; class=&quot;headerlink&quot; title=&quot;栈&quot;&gt;&lt;/a&gt;栈&lt;/h1&gt;&lt;p&gt;今天就来讲讲栈的一些理解。对于什么叫栈，栈的诞生这些在网上可以自行去查阅，我就不再叙述。只要知道栈最明显的一个特点就是：&lt;strong&gt;后进先出&lt;/
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer第十二题：数值的整数次方</title>
    <link href="http://yoursite.com/2017/12/16/%E5%89%91%E6%8C%87-12/"/>
    <id>http://yoursite.com/2017/12/16/剑指-12/</id>
    <published>2017-12-16T09:43:43.000Z</published>
    <updated>2017-12-16T10:33:03.945Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h3 id="此系列为牛客网剑指Offer系列。"><a href="#此系列为牛客网剑指Offer系列。" class="headerlink" title="此系列为牛客网剑指Offer系列。"></a><strong>此系列为<a href="https://www.nowcoder.com/ta/coding-interviews" target="_blank" rel="noopener">牛客网剑指Offer系列</a>。</strong></h3><p>撰写此博文只为记录点滴与总结。</p><hr><h1 id="数值的整数次方"><a href="#数值的整数次方" class="headerlink" title="数值的整数次方"></a>数值的整数次方</h1><p>给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。</p><ul><li><strong>考虑2种边界值的情况。如果exponent小于零，base为零，那么这样分母就为零，这是错误的，直接返回false。如果exponent为零，base无论为何值，值都为1。这是两种极端的情况，但是还有本题如果exponent小于零，而base不为零，那么值就会是分式，和exponent大于零的时候计算会出现两种值，需要两个变量来存这两种情况，而我们要做的是无论exponent是否是正数还是负数，都把最后的值存在一个变量里，最后返回的时候判断一下就行，所以当exponent为负数时，把它取正，用一个变量来记录exponent其实为负数，这样在最后计算的时候不会分不清exponent到底是正数还是负数的情况。说完了指数的正负零的情况，那么来分析怎么才能计算base应该自乘多少次呢？题目给出指数exponent肯定为整数，那么一个整数我们用二进制去表示，我们能够通过这个二进制数每次右移一位，能得到这个二进制需要右移几次才会变成零，这二进制右移几次也就是base自乘几次。或者每次都减去1也是同一个道理，但记住，如果用减1的方法，要在循环之前先减1!</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Power</span>(<span class="params">base, exponent</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">let</span> minus = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span>(exponent &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(base === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        exponent = -exponent</span><br><span class="line">        minus = <span class="literal">false</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(exponent === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> result = base</span><br><span class="line">    <span class="keyword">while</span>(exponent != <span class="number">0</span>) &#123;</span><br><span class="line">        exponent &gt;&gt;= <span class="number">1</span></span><br><span class="line">        result *= base</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> minus ? result : (<span class="number">1</span>/result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="如有帮助，请收藏本博客，谢谢！"><a href="#如有帮助，请收藏本博客，谢谢！" class="headerlink" title="如有帮助，请收藏本博客，谢谢！"></a><strong>如有帮助，请收藏本博客，谢谢！</strong></h1><p><img src="http://p0kkg0pkm.bkt.clouddn.com/17-12-7/4770802.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;h3 id=&quot;此系列为牛客网剑指Offer系列。&quot;&gt;&lt;a href=&quot;#此系列为牛客网剑指Offer系列。&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="剑指Offer系列" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87Offer%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer第十一题：二进制中1的个数</title>
    <link href="http://yoursite.com/2017/12/13/%E5%89%91%E6%8C%87-11/"/>
    <id>http://yoursite.com/2017/12/13/剑指-11/</id>
    <published>2017-12-13T14:02:16.000Z</published>
    <updated>2017-12-13T14:14:16.482Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h3 id="此系列为牛客网剑指Offer系列。"><a href="#此系列为牛客网剑指Offer系列。" class="headerlink" title="此系列为牛客网剑指Offer系列。"></a><strong>此系列为<a href="https://www.nowcoder.com/ta/coding-interviews" target="_blank" rel="noopener">牛客网剑指Offer系列</a>。</strong></h3><p>撰写此博文只为记录点滴与总结。</p><hr><h1 id="二进制中1的个数"><a href="#二进制中1的个数" class="headerlink" title="二进制中1的个数"></a>二进制中1的个数</h1><p>输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。</p><ul><li><strong>假设输入一个10，那么它的二进制就是0000 1010，要得到这个二进制中1的个数，就想办法右移这个二进制，那么1的右移就通过减去1来实现。每次减一，就会让最右边(不一定是第0位)的1向右移一位，那么此时就变成了0000 1001，这时候这个二进制就是十进制的9，和原数相与，那么就得到了0000 1000。这时候你应该能想到每次这样操作，就能遍历出所有1。</strong></li></ul><p><img src="http://p0kkg0pkm.bkt.clouddn.com/17-12-13/71682231.jpg" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NumberOf1</span>(<span class="params">n</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(n !== <span class="number">0</span>) &#123;</span><br><span class="line">        n = n &amp; (n<span class="number">-1</span>)</span><br><span class="line">        count++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="如有帮助，请收藏本博客，谢谢！"><a href="#如有帮助，请收藏本博客，谢谢！" class="headerlink" title="如有帮助，请收藏本博客，谢谢！"></a><strong>如有帮助，请收藏本博客，谢谢！</strong></h1><p><img src="http://p0kkg0pkm.bkt.clouddn.com/17-12-7/4770802.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;h3 id=&quot;此系列为牛客网剑指Offer系列。&quot;&gt;&lt;a href=&quot;#此系列为牛客网剑指Offer系列。&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="剑指Offer系列" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87Offer%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer第十题：矩形覆盖</title>
    <link href="http://yoursite.com/2017/12/12/%E5%89%91%E6%8C%87-10/"/>
    <id>http://yoursite.com/2017/12/12/剑指-10/</id>
    <published>2017-12-12T12:25:34.000Z</published>
    <updated>2017-12-12T13:15:20.695Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h3 id="此系列为牛客网剑指Offer系列。"><a href="#此系列为牛客网剑指Offer系列。" class="headerlink" title="此系列为牛客网剑指Offer系列。"></a><strong>此系列为<a href="https://www.nowcoder.com/ta/coding-interviews" target="_blank" rel="noopener">牛客网剑指Offer系列</a>。</strong></h3><p>撰写此博文只为记录点滴与总结。</p><hr><h1 id="矩形覆盖"><a href="#矩形覆盖" class="headerlink" title="矩形覆盖"></a>矩形覆盖</h1><p>我们可以用2*1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2*1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？</p><ul><li><strong>碰到这种题，先从头开始试试有没有规律可循。如果n等于零，那么铁定是0种方法。如果n是1，那么也就只有一种方法。如果n是2，那么就两种放法。当n是3，第一次如果横着放，那么就剩下F(3-1)种放法，如果第一次竖着放，第二次也只能竖着放，最后只剩下F(3-2)种放法。从这里其实可以已经看出这题有点像我们之前做的<a href="http://yittang.cn/2017/12/09/%E5%89%91%E6%8C%87-7/#more" target="_blank" rel="noopener">斐波那契数列</a>，你不妨可以再试试后面几个值。既然是斐波那契数列，那就好办了，除了前三项是特定之外，后面的每一项都是前两项之和。</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rectCover</span>(<span class="params">number</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">    <span class="keyword">if</span>(number &lt;=<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr[number]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">3</span>; i&lt;=number; i++) &#123;</span><br><span class="line">        arr[i] = arr[i<span class="number">-1</span>] + arr[i<span class="number">-2</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr[number]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="如有帮助，请收藏本博客，谢谢！"><a href="#如有帮助，请收藏本博客，谢谢！" class="headerlink" title="如有帮助，请收藏本博客，谢谢！"></a><strong>如有帮助，请收藏本博客，谢谢！</strong></h1><p><img src="http://p0kkg0pkm.bkt.clouddn.com/17-12-7/4770802.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;h3 id=&quot;此系列为牛客网剑指Offer系列。&quot;&gt;&lt;a href=&quot;#此系列为牛客网剑指Offer系列。&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="剑指Offer系列" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87Offer%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer第九题：变态跳台阶</title>
    <link href="http://yoursite.com/2017/12/11/%E5%89%91%E6%8C%87-9/"/>
    <id>http://yoursite.com/2017/12/11/剑指-9/</id>
    <published>2017-12-11T12:46:29.000Z</published>
    <updated>2017-12-11T13:57:43.246Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h3 id="此系列为牛客网剑指Offer系列。"><a href="#此系列为牛客网剑指Offer系列。" class="headerlink" title="此系列为牛客网剑指Offer系列。"></a><strong>此系列为<a href="https://www.nowcoder.com/ta/coding-interviews" target="_blank" rel="noopener">牛客网剑指Offer系列</a>。</strong></h3><p>撰写此博文只为记录点滴与总结。</p><hr><h1 id="变态跳台阶"><a href="#变态跳台阶" class="headerlink" title="变态跳台阶"></a>变态跳台阶</h1><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p><ul><li><strong>这道题就是<a href="http://yittang.cn/2017/12/10/%E5%89%91%E6%8C%87-8/" target="_blank" rel="noopener">前一题</a>的衍生题。如果青蛙第一次跳1级，那么还剩下F(n-1)种跳法，第一次跳2级，那么还剩下F(n-2)种跳法。。。如果跳n-1级，那么还剩下F(n-(n-1))种跳法。所以F(n)=F(n-1)+F(n-2)+…+F(2)+F(1)，此时我们可以用到高中的数学知识，得出F(n-1)=F(n-2)+F(n-3)+…+F(2)+F(1),两式相减，所以此时得到F(n)=2*F(n-1)。</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jumpFloorII</span>(<span class="params">number</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span>(number &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(number === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>*jumpFloorII(number <span class="number">-1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>在网上还看到一种超厉害的代码,二进制移位操作<blockquote><p>每个台阶都有跳与不跳两种情况（除了最后一个台阶），最后一个台阶必须跳。所以共用2^(n-1)中情况</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jumpFloorII</span>(<span class="params">number</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> &lt;&lt; (number<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul><hr><h1 id="如有帮助，请收藏本博客，谢谢！"><a href="#如有帮助，请收藏本博客，谢谢！" class="headerlink" title="如有帮助，请收藏本博客，谢谢！"></a><strong>如有帮助，请收藏本博客，谢谢！</strong></h1><p><img src="http://p0kkg0pkm.bkt.clouddn.com/17-12-7/4770802.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;h3 id=&quot;此系列为牛客网剑指Offer系列。&quot;&gt;&lt;a href=&quot;#此系列为牛客网剑指Offer系列。&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="剑指Offer系列" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87Offer%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>双向链表</title>
    <link href="http://yoursite.com/2017/12/11/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2017/12/11/双向链表/</id>
    <published>2017-12-11T09:49:20.000Z</published>
    <updated>2017-12-16T11:25:07.163Z</updated>
    
    <content type="html"><![CDATA[<h1 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h1><p>上次已经整理过关于单向链表的知识点了，那么今天就来说说关于双向链表的知识吧。<br><strong>何为双向链表呢？它跟单向链表唯一的不同就在于，每个节点不再只是单纯的指向下一个节点了，而是指向双向，一个链向下一个节点，一个链向上一个链表，如图所示。</strong></p><p><img src="http://p0kkg0pkm.bkt.clouddn.com/17-12-11/90175713.jpg" alt=""></p><h2 id="双向链表的优点"><a href="#双向链表的优点" class="headerlink" title="双向链表的优点"></a>双向链表的优点</h2><p>它比链表多一个指向，就是因为单向链表在错过要取的元素，每次都要从头来过，所以双向链表就承载了这一使命，错过的元素不需要每次重新迭代。</p><h2 id="Node类"><a href="#Node类" class="headerlink" title="Node类"></a>Node类</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.element = element</span><br><span class="line">  <span class="keyword">this</span>.pre = <span class="literal">null</span> <span class="comment">//新增</span></span><br><span class="line">  <span class="keyword">this</span>.next = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>它(this.pre)比单向链表多了一个指向前一节点的指针。</p><h2 id="DoublyLinkedList类"><a href="#DoublyLinkedList类" class="headerlink" title="DoublyLinkedList类"></a>DoublyLinkedList类</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DoublyLinkedList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.head = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.length = <span class="number">0</span></span><br><span class="line">    <span class="keyword">this</span>.tail = <span class="literal">null</span> <span class="comment">//新增</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>它(tail)比单向链表新增了一个指向链表尾部的指针。</p></li></ul><h3 id="双向链表的方法"><a href="#双向链表的方法" class="headerlink" title="双向链表的方法"></a>双向链表的方法</h3><h4 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h4><ul><li>在双向链表任意位置添加元素<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">DoublyLinkedList.prototype.insert = <span class="function"><span class="keyword">function</span> (<span class="params">position, element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(position &gt;= <span class="number">0</span> &amp;&amp; position &lt;= <span class="keyword">this</span>.length) &#123;</span><br><span class="line">        <span class="keyword">let</span> node = <span class="keyword">new</span> Node(element),</span><br><span class="line">        current = <span class="keyword">this</span>.head,</span><br><span class="line">        previous,</span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> (position === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.head) &#123;</span><br><span class="line">                <span class="keyword">this</span>.head = node</span><br><span class="line">                <span class="keyword">this</span>.tail = node</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                node.next = current</span><br><span class="line">                current.pre = node</span><br><span class="line">                <span class="keyword">this</span>.head = node</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position === <span class="keyword">this</span>.length) &#123;</span><br><span class="line">            current = <span class="keyword">this</span>.tail</span><br><span class="line">            current.next = node</span><br><span class="line">            node.pre = current</span><br><span class="line">            <span class="keyword">this</span>.tail = node</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">//position !== 0</span></span><br><span class="line">            <span class="keyword">while</span> (index &lt; position) &#123;</span><br><span class="line">                previous = current</span><br><span class="line">                current = current.next</span><br><span class="line">                index++</span><br><span class="line">            &#125;</span><br><span class="line">            previous.next = node</span><br><span class="line">            node.next = current</span><br><span class="line">            node.pre = previous</span><br><span class="line">            current.pre = node</span><br><span class="line">        &#125; <span class="comment">//position !== 0</span></span><br><span class="line">        <span class="keyword">this</span>.length++</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><strong>看到上面一大堆代码是不是感觉很害怕？别怕，其实双向链表的insert方法跟单向链表的没有差距很多，只是新增了一些而已。还是分情况来讨论新元素插入在链表的几种位置情况。第一种：新元素直接在头节点插入，如果头节点本身不存在，那么头节点此时就指向了新元素，此时链表只有当前的新元素，也就是最后一个元素，那么tail指向这个最后一个元素。第二种：新元素插入在链表的尾部，因为我们链表当中有个属性是指向整个链表的尾部，所以我们直接可以把当前元素指向这个tail，这样我们能直接获取链表的最后一个节点，此时添加新元素，只要把尾元素的下一指针指向新元素，新元素的前一指针指向原最后的元素，tail指向这个新元素，那么就完成了新元素插入链表尾部的事件。第三种，就是向链表的中间某一位置插入新元素，这跟单向链表的方式很类似，从头开始遍历整个链表，取到要插入位置的前一元素(previous)和当前元素(current，也是即将成为新元素的后一元素)，因为是双向链表，所以我们的previous.next指向新元素，新元素的pre指针指向previous，新元素的next指针指向current节点，current的pre指针指向新元素。最后千万别忘了，让真个链表的长度加加！</strong></li></ul><p><img src="http://p0kkg0pkm.bkt.clouddn.com/17-12-11/69405943.jpg" alt=""></p><h4 id="removeAt"><a href="#removeAt" class="headerlink" title="removeAt"></a>removeAt</h4><ul><li>在任意位置移除元素<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">DoublyLinkedList.prototype.removeAt = <span class="function"><span class="keyword">function</span>(<span class="params">position</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(position &gt;= <span class="number">0</span> &amp;&amp; position &lt; <span class="keyword">this</span>.length) &#123;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="keyword">this</span>.head,</span><br><span class="line">        index = <span class="number">0</span>,</span><br><span class="line">        previous</span><br><span class="line">        <span class="keyword">if</span>(position === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.head = current.next</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.length === <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.tail = <span class="literal">null</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.head.pre = <span class="literal">null</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(position === <span class="keyword">this</span>.length<span class="number">-1</span>) &#123;</span><br><span class="line">            current = <span class="keyword">this</span>.tail</span><br><span class="line">            <span class="keyword">this</span>.tail = current.pre</span><br><span class="line">            current.pre.next = <span class="literal">null</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (index &lt; position) &#123;</span><br><span class="line">                previous = current</span><br><span class="line">                current = current.next</span><br><span class="line">                index++</span><br><span class="line">            &#125;</span><br><span class="line">            previous.next = current.next</span><br><span class="line">            current = current.next</span><br><span class="line">            current.pre = previous</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.length--</span><br><span class="line">        <span class="keyword">return</span> current.element</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><strong>如果你理解了之前的insert方法，那么对于理解removeAt方法对你来说并不会有什么太大难度。好，继续来分析这个方法。对于removeAt方法，我们还是要分情况讨论。第一种：删去头节点，很简单，只要头节点指向当前元素的下一节点就行了，但是在这里当心噢！因为可能整个链表只有这一个节点，所以如果只有这一个节点，那么要把tail给置空，如果不是，那就要把新头节点的pre属性置空。第二种情况：删去链表尾部，我们能通过tail来得到链表的最后一个节点，所以我们只要把最后一个节点的next属性置空，并且tail指向它就行了。第三种情况：在链表的任意位置删除节点，那么我们就又要遍历整个链表了，直到遍历出要被删的节点(current)，那么删除它更简单，current的previous节点指向它的后一节点，它的后一节点指向previous就行了。</strong></li></ul><p>末尾：是不是觉得现在对于链表的认知又提升了一不？是不是超简单的？赶紧自己也动手撸一个链表吧！！！<br><img src="http://p0kkg0pkm.bkt.clouddn.com/17-12-11/90726450.jpg" alt=""></p><hr><h1 id="如有帮助，请收藏本博客，谢谢！"><a href="#如有帮助，请收藏本博客，谢谢！" class="headerlink" title="如有帮助，请收藏本博客，谢谢！"></a><strong>如有帮助，请收藏本博客，谢谢！</strong></h1><p><img src="http://p0kkg0pkm.bkt.clouddn.com/17-12-7/4770802.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;双向链表&quot;&gt;&lt;a href=&quot;#双向链表&quot; class=&quot;headerlink&quot; title=&quot;双向链表&quot;&gt;&lt;/a&gt;双向链表&lt;/h1&gt;&lt;p&gt;上次已经整理过关于单向链表的知识点了，那么今天就来说说关于双向链表的知识吧。&lt;br&gt;&lt;strong&gt;何为双向链表呢？它跟单向
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer第八题：跳台阶</title>
    <link href="http://yoursite.com/2017/12/10/%E5%89%91%E6%8C%87-8/"/>
    <id>http://yoursite.com/2017/12/10/剑指-8/</id>
    <published>2017-12-10T10:34:17.000Z</published>
    <updated>2017-12-11T13:59:53.174Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h3 id="此系列为牛客网剑指Offer系列。"><a href="#此系列为牛客网剑指Offer系列。" class="headerlink" title="此系列为牛客网剑指Offer系列。"></a><strong>此系列为<a href="https://www.nowcoder.com/ta/coding-interviews" target="_blank" rel="noopener">牛客网剑指Offer系列</a>。</strong></h3><p>撰写此博文只为记录点滴与总结。</p><hr><h1 id="跳台阶"><a href="#跳台阶" class="headerlink" title="跳台阶"></a>跳台阶</h1><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p><ul><li><strong>题目中说明青蛙要么跳1级，要么就2级。假如只有1级台阶，当前情况只能跳1级。假如有2级台阶，那么显然有两种跳法，第一次要么跳1级，要么直接跳2级。那当跳n级台阶时，如果我们把它看成是n的函数(n&gt;2)。假如第一次跳1级台阶，那么就剩下F(n-1)种跳法，如果第一次跳2级，那么就剩下F(n-2)种跳法。所以F(n)=F(n-1)+F(n-2)。思路虽然是这样，但如果我们通过递归函数去求得这种结果，会让程序的执行效率非常的低，所以我们需要去想有没有其它更好的方法。还有记得前一题斐波那契数列么？如果我们需要去获取这个数列的最后一项，那么我们可以通过循环把前两个值分别赋值给两个变量，只要把这两个变量相加就是我们所需的结果。</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jumpFloor</span>(<span class="params">number</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span>(number &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(number === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(number === <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> pre = <span class="number">1</span>,</span><br><span class="line">        next = <span class="number">2</span>,</span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">3</span>; i&lt;=number; i++) &#123;</span><br><span class="line">        result = pre + next</span><br><span class="line">        pre = next</span><br><span class="line">        next = result</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="如有帮助，请收藏本博客，谢谢！"><a href="#如有帮助，请收藏本博客，谢谢！" class="headerlink" title="如有帮助，请收藏本博客，谢谢！"></a><strong>如有帮助，请收藏本博客，谢谢！</strong></h1><p><img src="http://p0kkg0pkm.bkt.clouddn.com/17-12-7/4770802.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;h3 id=&quot;此系列为牛客网剑指Offer系列。&quot;&gt;&lt;a href=&quot;#此系列为牛客网剑指Offer系列。&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="剑指Offer系列" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87Offer%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>单向链表</title>
    <link href="http://yoursite.com/2017/12/09/%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2017/12/09/链表/</id>
    <published>2017-12-09T10:39:19.000Z</published>
    <updated>2017-12-16T11:25:08.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h1><p>作为一个程序猿，我相信只要整日与代码为伍的动物，那肯定离不开数据结构这种恶心又让人爱的数学思维，那么今天我就整理了一下关于链表的知识。</p><h2 id="何为链表？"><a href="#何为链表？" class="headerlink" title="何为链表？"></a>何为链表？</h2><p>链表，即存储有序的元素的集合，是一种线性表，但不会按线性的顺序去存储数据。为什么会有链表呢？那就不得不稍微提一下我们经常接触的另一个数据结构：数组。数组的结构非常容易理解，并且能随意获取数组每一个位置的数据，但也有它不足之处，那就是从数组的头部或中间任意位置插入或删除项的成本非常高，所以链表诞生而出。(哈哈哈，各位看官看看就好，莫要太当真。)链表内每个元素不像数组一样，只是单纯的存储数据，而是每个元素都由一个存储元素本身的节点和一个指向下一个元素的指针组成。如下图所示，元素一个指向下一个，直到null为止。</p><p><img src="http://p0kkg0pkm.bkt.clouddn.com/17-12-9/45324486.jpg" alt="示意图"></p><h2 id="链表的优点"><a href="#链表的优点" class="headerlink" title="链表的优点"></a>链表的优点</h2><p>链表不像数组那样，添加一个元素时，需要移动其它元素，而是只要断开想添加的地方的指针，指向要添加的元素，再把新添加元素的指针指向原先被断开的元素，如图所示。</p><p><img src="http://p0kkg0pkm.bkt.clouddn.com/17-12-9/41339135.jpg" alt=""></p><p>好了，通过以上的介绍，想必现在你的脑海里一定有了对于链表一定的概念了，那么接下来让我们来看看如何创建单向链表的。</p><h2 id="Node类"><a href="#Node类" class="headerlink" title="Node类"></a>Node类</h2><h3 id="创建链表"><a href="#创建链表" class="headerlink" title="创建链表"></a>创建链表</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.element = element</span><br><span class="line">  <span class="keyword">this</span>.next = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LinkedList类"><a href="#LinkedList类" class="headerlink" title="LinkedList类"></a>LinkedList类</h2><h3 id="链表的方法"><a href="#链表的方法" class="headerlink" title="链表的方法"></a>链表的方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LinkedList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.head = <span class="literal">null</span> <span class="comment">//头节点</span></span><br><span class="line">  <span class="keyword">let</span> length = <span class="number">0</span> <span class="comment">//链表长度</span></span><br><span class="line">  <span class="keyword">this</span>.append = <span class="function">(<span class="params">element</span>) =&gt;</span> &#123;...&#125; <span class="comment">//链尾添加元素</span></span><br><span class="line">  <span class="keyword">this</span>.insert = <span class="function">(<span class="params">position, element</span>) =&gt;</span> &#123;...&#125; <span class="comment">//特定位置插入元素</span></span><br><span class="line">  <span class="keyword">this</span>.removeAt = <span class="function">(<span class="params">element</span>) =&gt;</span> &#123;...&#125; <span class="comment">//移除特定元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>接下来就分别看链表的方法</p><h4 id="append"><a href="#append" class="headerlink" title="append"></a>append</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.append = <span class="function">(<span class="params">element</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> node = <span class="keyword">new</span> Node(element)</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.head === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.head = node</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="keyword">this</span>.head</span><br><span class="line">        <span class="keyword">while</span>(current.next) &#123;</span><br><span class="line">            current = current.next</span><br><span class="line">        &#125;</span><br><span class="line">        current.next = node</span><br><span class="line">    &#125;</span><br><span class="line">    length++  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>我们来分析下，当要向链表添加某个元素时，首先判断是否存在头节点。如果头节点为空，那么我们就把头节点指向我们创建的元素节点，那么也就是整个链表现在只有头节点。如果不为空，因为append方法是向链表的尾部添加新元素，所以我们要找到这个链表的尾部，那么什么情况下说明我们当前元素是最后一个元素？只有当最后一个元素的指针指向null的时候就是了，所以先把当前指针指向头节点，然后开始遍历整个链表直到最后一个元素，此时把最后一个元素的指针指向我们新元素即可。</strong></p></li></ul><p><img src="http://p0kkg0pkm.bkt.clouddn.com/17-12-10/17389624.jpg" alt=""></p><h4 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.insert = <span class="function">(<span class="params">position, element</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(position &gt;= <span class="number">0</span> &amp;&amp; position &lt;= length) &#123;</span><br><span class="line">        <span class="keyword">let</span> node = <span class="keyword">new</span> Node(element),</span><br><span class="line">        current = <span class="keyword">this</span>.head, <span class="comment">//当前元素指向头节点</span></span><br><span class="line">        previous, <span class="comment">//新元素的前一元素</span></span><br><span class="line">        index = <span class="number">0</span>   </span><br><span class="line">        <span class="keyword">if</span>(position === <span class="number">0</span>) &#123; <span class="comment">//头节点位置插入新元素</span></span><br><span class="line">            node.next = current</span><br><span class="line">            <span class="keyword">this</span>.head = node</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(index &lt; position) &#123;</span><br><span class="line">                previous = current</span><br><span class="line">                current = current.next</span><br><span class="line">                index++</span><br><span class="line">            &#125;</span><br><span class="line">            previous.next = node</span><br><span class="line">            node.next = current</span><br><span class="line">        &#125;</span><br><span class="line">        length++</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span> </span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span> <span class="comment">//位置不合理，直接返回</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>首先要判断要插入新元素的位置是否在链表长度范围内，如果合理才去插入新元素。插入新元素的位置两种可能，一种在头节点，另一种在链表的中间的某一位置，因为这两种情况都要从头节点开始，所以我们把当前元素指向头节点，这样方便我们后面去遍历整个链表。先来看如果我们的新元素要插在头节点位置，那么我们的新元素的指针指向当前元素，头节点指向新元素，这就完成了头节点插入新元素。如图</strong></li></ul><p><img src="http://p0kkg0pkm.bkt.clouddn.com/17-12-9/36369871.jpg" alt="头节点插入新元素"></p><ul><li><strong>如果新元素插在链表的任意位置，那么就要从头开始遍历整个链表，所以我们就要循环访问整个链表，直到当index值等于我们要插入新元素位置的值一样时，跳出循环，此时我们得到两个元素，一个previous，是新元素的前一个元素，current当前值，是新元素的后一个元素，所以只要让前一个元素指向性元素，新元素指向当前值就完成了insert方法。</strong></li></ul><p><img src="http://p0kkg0pkm.bkt.clouddn.com/17-12-10/8907085.jpg" alt=""></p><h4 id="removeAt"><a href="#removeAt" class="headerlink" title="removeAt"></a>removeAt</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.removeAt = <span class="function">(<span class="params">position</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(position &gt;= <span class="number">0</span> &amp;&amp; position &lt; length) &#123; <span class="comment">//删除链表的位置合理</span></span><br><span class="line">        <span class="keyword">let</span> current = <span class="keyword">this</span>.head,</span><br><span class="line">        index = <span class="number">0</span>,</span><br><span class="line">        previous</span><br><span class="line">        <span class="keyword">if</span>(position === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.head = current.next</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(index &lt; position) &#123;</span><br><span class="line">                previous = current</span><br><span class="line">                current = current.next</span><br><span class="line">                index++</span><br><span class="line">            &#125;</span><br><span class="line">            previous.next = current.next</span><br><span class="line">            length--</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> current.element</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>任意位置删除链表的元素，其实跟insert方法非常的相似。我们先来看假如删除头元素，只要让头节点指向当前元素的下一节点就是删除了。另一种情况是任意位置删除元素，我们还是要从头开始遍历整个链表，要被删除的元素的前一元素只要指向被删除元素的下一节点也就算删除了。</strong></li></ul><p><img src="http://p0kkg0pkm.bkt.clouddn.com/17-12-10/72220608.jpg" alt=""></p><p>好了，关于单向链表的知识点就讲到这，如有需要请自己多多去深入挖掘。:)</p><hr><h1 id="如有帮助，请收藏本博客，谢谢！"><a href="#如有帮助，请收藏本博客，谢谢！" class="headerlink" title="如有帮助，请收藏本博客，谢谢！"></a><strong>如有帮助，请收藏本博客，谢谢！</strong></h1><p><img src="http://p0kkg0pkm.bkt.clouddn.com/17-12-7/4770802.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;单向链表&quot;&gt;&lt;a href=&quot;#单向链表&quot; class=&quot;headerlink&quot; title=&quot;单向链表&quot;&gt;&lt;/a&gt;单向链表&lt;/h1&gt;&lt;p&gt;作为一个程序猿，我相信只要整日与代码为伍的动物，那肯定离不开数据结构这种恶心又让人爱的数学思维，那么今天我就整理了一下关于链
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer第七题：斐波那契数列</title>
    <link href="http://yoursite.com/2017/12/09/%E5%89%91%E6%8C%87-7/"/>
    <id>http://yoursite.com/2017/12/09/剑指-7/</id>
    <published>2017-12-09T10:29:37.000Z</published>
    <updated>2017-12-11T13:50:26.465Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h3 id="此系列为牛客网剑指Offer系列。"><a href="#此系列为牛客网剑指Offer系列。" class="headerlink" title="此系列为牛客网剑指Offer系列。"></a><strong>此系列为<a href="https://www.nowcoder.com/ta/coding-interviews" target="_blank" rel="noopener">牛客网剑指Offer系列</a>。</strong></h3><p>撰写此博文只为记录点滴与总结。</p><hr><h1 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h1><p>大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项。<br>n&lt;=39</p><ul><li><strong><a href="https://baike.baidu.com/item/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97" target="_blank" rel="noopener">斐波那契数列</a>，简而言之，就是这个数列就是F(0)=0，F(1)=1，F(n)=F(n-1)+F(n-2)…从第二项开始这个数列每一项都是前两项的和，所以思路也就是求前两项之和。</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fibonacci</span>(<span class="params">n</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span>(n &gt; <span class="number">39</span> || n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">2</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        arr[i] = arr[i<span class="number">-1</span>] + arr[i<span class="number">-2</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr[n]  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="如有帮助，请收藏本博客，谢谢！"><a href="#如有帮助，请收藏本博客，谢谢！" class="headerlink" title="如有帮助，请收藏本博客，谢谢！"></a><strong>如有帮助，请收藏本博客，谢谢！</strong></h1><p><img src="http://p0kkg0pkm.bkt.clouddn.com/17-12-7/4770802.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;h3 id=&quot;此系列为牛客网剑指Offer系列。&quot;&gt;&lt;a href=&quot;#此系列为牛客网剑指Offer系列。&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="剑指Offer系列" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87Offer%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer第六题：旋转数组的最小数字</title>
    <link href="http://yoursite.com/2017/12/08/%E5%89%91%E6%8C%87-6/"/>
    <id>http://yoursite.com/2017/12/08/剑指-6/</id>
    <published>2017-12-08T14:58:47.000Z</published>
    <updated>2017-12-11T13:50:17.378Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h3 id="此系列为牛客网剑指Offer系列。"><a href="#此系列为牛客网剑指Offer系列。" class="headerlink" title="此系列为牛客网剑指Offer系列。"></a><strong>此系列为<a href="https://www.nowcoder.com/ta/coding-interviews" target="_blank" rel="noopener">牛客网剑指Offer系列</a>。</strong></h3><p>撰写此博文只为记录点滴与总结。</p><hr><h1 id="旋转数组的最小数字"><a href="#旋转数组的最小数字" class="headerlink" title="旋转数组的最小数字"></a>旋转数组的最小数字</h1><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。</p><ul><li><strong>根据题目考虑两种情况，一种数组没有元素，则返回0，另一种有元素，但是是经过旋转之后并且非递减排序的，那么此时要找到数组的最小值就不能直接获取了。这时候要获取数组的最小值虽然能通过遍历能获得，但是效率太低，所以我采用了<a href="http://yuedm.blog.163.com/blog/static/188306019201151495859300/" target="_blank" rel="noopener">二分法</a>。因为题目原数组是有序的，只是经过旋转之后变的没有序，但是有一点得清除，虽然经过旋转之后没有序，但是在最小值的左边和右边都是递增型的，这时候通过数组的首值(left)中间值(mid)进行比较，当首值小于等于中间值时，说明中间值在前递增数组内，那么最小值在中间值的右边，所以此时把mid的index赋给left的index，这样再去遍历右边的数组，而不需要遍历左边的数组 ；如果首值大于中间值时，说明中间值在右边的递增数组内，那么最小值在中间值的左边，所以此时把mid的index赋给right的index，这样也就不用去遍历右边的数组。往后以此类推。</strong></li><li>可能有点绕，还是上代码比较能让你理解。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">minNumberInRotateArray</span>(<span class="params">rotateArray</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">let</span> len = rotateArray.length</span><br><span class="line">    <span class="keyword">if</span>(!len) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>,</span><br><span class="line">        right = len - <span class="number">1</span>,</span><br><span class="line">        mid = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(rotateArray[left] &gt;= rotateArray[right]) &#123; <span class="comment">//说明数组旋转过</span></span><br><span class="line">        <span class="keyword">if</span>(right - left == <span class="number">1</span>) &#123; <span class="comment">//数组只有两个元素，最小值一定是第二个</span></span><br><span class="line">            mid = right</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        mid = <span class="built_in">Math</span>.floor((right + left)/ <span class="number">2</span>)</span><br><span class="line">        <span class="comment">//首值，中间值，最后值相同只能去遍历</span></span><br><span class="line">        <span class="keyword">if</span> (rotateArray[left] == rotateArray[mid] &amp;&amp; rotateArray[right] == rotateArray[mid]) &#123;</span><br><span class="line">            <span class="keyword">let</span> min = rotateArray[left]</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i=left+<span class="number">1</span>; i&lt;=right; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(rotateArray[i] &lt; min) &#123;</span><br><span class="line">                    min = rotateArray[i]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> min</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(rotateArray[left] &lt;= rotateArray[mid]) &#123;</span><br><span class="line">            left = mid</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            right = mid</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rotateArray[mid]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="如有帮助，请收藏本博客，谢谢！"><a href="#如有帮助，请收藏本博客，谢谢！" class="headerlink" title="如有帮助，请收藏本博客，谢谢！"></a><strong>如有帮助，请收藏本博客，谢谢！</strong></h1><p><img src="http://p0kkg0pkm.bkt.clouddn.com/17-12-7/4770802.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;h3 id=&quot;此系列为牛客网剑指Offer系列。&quot;&gt;&lt;a href=&quot;#此系列为牛客网剑指Offer系列。&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="剑指Offer系列" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87Offer%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer第五题：用两个栈实现队列</title>
    <link href="http://yoursite.com/2017/12/07/%E5%89%91%E6%8C%87-5/"/>
    <id>http://yoursite.com/2017/12/07/剑指-5/</id>
    <published>2017-12-07T12:20:52.000Z</published>
    <updated>2017-12-11T13:50:08.108Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h3 id="此系列为牛客网剑指Offer系列。"><a href="#此系列为牛客网剑指Offer系列。" class="headerlink" title="此系列为牛客网剑指Offer系列。"></a><strong>此系列为<a href="https://www.nowcoder.com/ta/coding-interviews" target="_blank" rel="noopener">牛客网剑指Offer系列</a>。</strong></h3><p>撰写此博文只为记录点滴与总结。</p><hr><h1 id="用两个栈实现队列"><a href="#用两个栈实现队列" class="headerlink" title="用两个栈实现队列"></a>用两个栈实现队列</h1><p>用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型</p><ul><li><strong><a href="https://www.cnblogs.com/VitoCorleone/archive/2014/06/12/3784468.html" target="_blank" rel="noopener">队列</a>跟栈稍微有点不同,是只允许在一端进行插入操作，在另一端进行删除操作的线性表。但从其字面意思上就能猜到跟我们日常生活中排队一样，谁先进的队伍谁在前面，也就会先出去。所以队列的意义就是：先进先出，从尾部进入，从头部出去。所以，我们这里又可以愉快的用到JS数组的方法了，不清楚js数组的方法的可以看<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noopener">mdn</a>。言归正传，数组常用的方法push就是将一个或多个元素添加到数组的末尾，shift就是从数组中删除第一个元素。这不就是我们需要的队列的方法么？好了接下来一切都简单了。我们只需要一个模拟的栈用push，另一个用来pop。</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stackA = [],</span><br><span class="line">    stackB = []</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">node</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    stackA.push(node)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pop</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    stackB = stackA.shift()</span><br><span class="line">    <span class="keyword">return</span> stackB</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="如有帮助，请收藏本博客，谢谢！"><a href="#如有帮助，请收藏本博客，谢谢！" class="headerlink" title="如有帮助，请收藏本博客，谢谢！"></a><strong>如有帮助，请收藏本博客，谢谢！</strong></h1><p><img src="http://p0kkg0pkm.bkt.clouddn.com/17-12-7/4770802.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;h3 id=&quot;此系列为牛客网剑指Offer系列。&quot;&gt;&lt;a href=&quot;#此系列为牛客网剑指Offer系列。&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="剑指Offer系列" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87Offer%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer第四题：重建二叉树</title>
    <link href="http://yoursite.com/2017/12/06/%E5%89%91%E6%8C%87-4/"/>
    <id>http://yoursite.com/2017/12/06/剑指-4/</id>
    <published>2017-12-06T14:04:59.000Z</published>
    <updated>2017-12-11T13:50:53.370Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h3 id="此系列为牛客网剑指Offer系列。"><a href="#此系列为牛客网剑指Offer系列。" class="headerlink" title="此系列为牛客网剑指Offer系列。"></a><strong>此系列为<a href="https://www.nowcoder.com/ta/coding-interviews" target="_blank" rel="noopener">牛客网剑指Offer系列</a>。</strong></h3><p>撰写此博文只为记录点滴与总结。</p><hr><h1 id="重建二叉树"><a href="#重建二叉树" class="headerlink" title="重建二叉树"></a>重建二叉树</h1><p>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。</p><ul><li>请先了解<a href="http://baike.sogou.com/v111776.htm?fromTitle=%E4%BA%8C%E5%85%83%E6%A8%B9" target="_blank" rel="noopener">什么叫二叉树</a></li><li><strong>因为输入的是前序序列和中序序列，那么我们能直接通过前序序列知道二叉树的根节点，然后通过中序序列直接知道二叉树的左子树(此记为中左子树)和右子树(此记为中右子树)有哪些节点。这样我们就能通过中左子树来得到前序序列中的左子树(记为前左子树)和右子树(记为前右子树)。然后通过递归思想，我们把前左子树传入当作新前序序列，中左子树当作新中序序列，来得到左子树的头结点和左子树包含的哪些节点，以此递归下去，右子树也是一样的思想。</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* function TreeNode(x) &#123;</span></span><br><span class="line"><span class="comment">    this.val = x;</span></span><br><span class="line"><span class="comment">    this.left = null;</span></span><br><span class="line"><span class="comment">    this.right = null;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reConstructBinaryTree</span>(<span class="params">pre, vin</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">if</span>(!pre.length || !vin.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> val = pre[<span class="number">0</span>] <span class="comment">//根节点</span></span><br><span class="line">    <span class="keyword">const</span> index = vin.indexOf(val) <span class="comment">//根节点在右子树的index位置</span></span><br><span class="line">    <span class="keyword">let</span> preLeft = pre.slice(<span class="number">1</span>, index+<span class="number">1</span>) <span class="comment">//前左子树</span></span><br><span class="line">    <span class="keyword">let</span> preRight = pre.slice(index+<span class="number">1</span>) <span class="comment">//前右子树</span></span><br><span class="line">    <span class="keyword">let</span> vinLeft = vin.slice(<span class="number">0</span>, index) <span class="comment">//中左子树</span></span><br><span class="line">    <span class="keyword">let</span> vinRight = vin.slice(index+<span class="number">1</span>) <span class="comment">//中右子树</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        val: val,</span><br><span class="line">        left: reConstructBinaryTree(preLeft, vinLeft),</span><br><span class="line">        right: reConstructBinaryTree(preRight, vinRight)  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="如有帮助，请收藏本博客，谢谢！"><a href="#如有帮助，请收藏本博客，谢谢！" class="headerlink" title="如有帮助，请收藏本博客，谢谢！"></a><strong>如有帮助，请收藏本博客，谢谢！</strong></h1><p><img src="http://p0kkg0pkm.bkt.clouddn.com/17-12-7/4770802.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;h3 id=&quot;此系列为牛客网剑指Offer系列。&quot;&gt;&lt;a href=&quot;#此系列为牛客网剑指Offer系列。&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="剑指Offer系列" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87Offer%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer第三题：从尾到头打印链表</title>
    <link href="http://yoursite.com/2017/12/05/%E5%89%91%E6%8C%87-3/"/>
    <id>http://yoursite.com/2017/12/05/剑指-3/</id>
    <published>2017-12-05T13:37:34.000Z</published>
    <updated>2017-12-11T13:50:46.309Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h3 id="此系列为牛客网剑指Offer系列。"><a href="#此系列为牛客网剑指Offer系列。" class="headerlink" title="此系列为牛客网剑指Offer系列。"></a><strong>此系列为<a href="https://www.nowcoder.com/ta/coding-interviews" target="_blank" rel="noopener">牛客网剑指Offer系列</a>。</strong></h3><p>撰写此博文只为记录点滴与总结。</p><hr><h1 id="从尾到头打印链表"><a href="#从尾到头打印链表" class="headerlink" title="从尾到头打印链表"></a>从尾到头打印链表</h1><p>输入一个链表，从尾到头打印链表每个节点的值。</p><ul><li>什么叫<a href="http://www.baike.com/wiki/%E9%93%BE%E8%A1%A8" target="_blank" rel="noopener">链表</a>，如果不清楚的可以先去了解下，接下来直接进入正题！</li><li><strong>题目：反向打印链表的所有节点。因为链表中每个节点包含的是本身节点的信息(value)和指向下一节点的指针，所以我们需要获取的就是这个value，但是要遍历所有节点，所以我们不可避免的需要用到这个指针。那么我们该如何反向输出整个链表呢？这时候链表的表亲=&gt;数组登场了，JS数组的API非常强大，本身属性方法中就有push、pop、unshift、shift等操作数组方法。既然题目要反向输出，而且链表是从头指向下一级，直到为null才结束，所以我们只要每次取到一个链表节点的时候，把它从数组的头部放入，也就是栈的思想，后进节点的永远在最前面，那么这样数组中就保存了整个反向链表，直接就能输出了！</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*function ListNode(x)&#123;</span></span><br><span class="line"><span class="comment">    this.val = x;</span></span><br><span class="line"><span class="comment">    this.next = null;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printListFromTailToHead</span>(<span class="params">head</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line">    <span class="keyword">while</span>(head) &#123;</span><br><span class="line">        arr.unshift(head.val)</span><br><span class="line">        head = head.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="如有帮助，请收藏本博客，谢谢！"><a href="#如有帮助，请收藏本博客，谢谢！" class="headerlink" title="如有帮助，请收藏本博客，谢谢！"></a><strong>如有帮助，请收藏本博客，谢谢！</strong></h1><p><img src="http://p0kkg0pkm.bkt.clouddn.com/17-12-7/4770802.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;h3 id=&quot;此系列为牛客网剑指Offer系列。&quot;&gt;&lt;a href=&quot;#此系列为牛客网剑指Offer系列。&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="剑指Offer系列" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87Offer%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer第二题：替换空格</title>
    <link href="http://yoursite.com/2017/12/04/%E5%89%91%E6%8C%87-2/"/>
    <id>http://yoursite.com/2017/12/04/剑指-2/</id>
    <published>2017-12-04T14:29:09.000Z</published>
    <updated>2017-12-11T13:50:40.564Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h3 id="此系列为牛客网剑指Offer系列。"><a href="#此系列为牛客网剑指Offer系列。" class="headerlink" title="此系列为牛客网剑指Offer系列。"></a><strong>此系列为<a href="https://www.nowcoder.com/ta/coding-interviews" target="_blank" rel="noopener">牛客网剑指Offer系列</a>。</strong></h3><p>撰写此博文只为记录点滴与总结。</p><hr><h1 id="替换空格"><a href="#替换空格" class="headerlink" title="替换空格"></a>替换空格</h1><p>请实现一个函数，将一个字符串中的空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p><ul><li><strong>JS中有一项非常强大的利器：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="noopener">正则</a>，其中有专门对应空格的匹配，和替换的方法replace</strong>。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceSpace</span>(<span class="params">str</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">let</span> reg = <span class="regexp">/\s/g</span></span><br><span class="line">    str = str.replace(reg, <span class="string">"%20"</span>)</span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="如有帮助，请收藏本博客，谢谢！"><a href="#如有帮助，请收藏本博客，谢谢！" class="headerlink" title="如有帮助，请收藏本博客，谢谢！"></a><strong>如有帮助，请收藏本博客，谢谢！</strong></h1><p><img src="http://p0kkg0pkm.bkt.clouddn.com/17-12-7/4770802.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;h3 id=&quot;此系列为牛客网剑指Offer系列。&quot;&gt;&lt;a href=&quot;#此系列为牛客网剑指Offer系列。&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="剑指Offer系列" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87Offer%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer第一题：二维数组中的查找</title>
    <link href="http://yoursite.com/2017/12/04/%E5%89%91%E6%8C%87-1/"/>
    <id>http://yoursite.com/2017/12/04/剑指-1/</id>
    <published>2017-12-04T13:13:41.000Z</published>
    <updated>2017-12-11T13:50:34.162Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h3 id="此系列为牛客网剑指Offer系列。"><a href="#此系列为牛客网剑指Offer系列。" class="headerlink" title="此系列为牛客网剑指Offer系列。"></a><strong>此系列为<a href="https://www.nowcoder.com/ta/coding-interviews" target="_blank" rel="noopener">牛客网剑指Offer系列</a>。</strong></h3><p>撰写此博文只为记录点滴与总结。</p><hr><h1 id="二维数组中的查找"><a href="#二维数组中的查找" class="headerlink" title="二维数组中的查找"></a>二维数组中的查找</h1><p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><ul><li><strong>一个二维数组并且内部排序是有序的，并且从左向右和从上至下都是递增的，那么也就是说每一行的最右边的元素会是最大的，此时只要拿这个数去与target作比较，就能去判断我下一步应该是换行，还是该在当前行去往前推，再去与target作比较，如此往复，就能去判断这个二维数组内部是否有target了。这种优势就是我没必要去遍历整个数组，节省很大的时间。说了这么多，还是上图比较容易理解，下面举例。</strong></li></ul><p><img src="http://p0kkg0pkm.bkt.clouddn.com/17-12-7/28494395.jpg" alt=""></p><ul><li>假设target为5，我们从这个二维数组的第一行的最右边(a15)去与target作比较，那么a15 &gt; 5，所以当前行往前推，a14 &gt; 5，再往前，直到a12 &lt; 5，所以要换一行，也就是b12与target作比较，这样往复去比较，就能知道这个二维数组中是否有target了。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Find</span>(<span class="params">target, array</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> j = array[i].length - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;array.length &amp;&amp; j&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(array[i][j] &gt; target) &#123;</span><br><span class="line">            j--</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(array[i][j] &lt; target) &#123;</span><br><span class="line">            i++</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="如有帮助，请收藏本博客，谢谢！"><a href="#如有帮助，请收藏本博客，谢谢！" class="headerlink" title="如有帮助，请收藏本博客，谢谢！"></a><strong>如有帮助，请收藏本博客，谢谢！</strong></h1><p><img src="http://p0kkg0pkm.bkt.clouddn.com/17-12-7/4770802.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;h3 id=&quot;此系列为牛客网剑指Offer系列。&quot;&gt;&lt;a href=&quot;#此系列为牛客网剑指Offer系列。&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="剑指Offer系列" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87Offer%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>初识Git与GitHub</title>
    <link href="http://yoursite.com/2017/12/02/%E8%AE%A4%E8%AF%86Git%E4%B8%8EGitHub/"/>
    <id>http://yoursite.com/2017/12/02/认识Git与GitHub/</id>
    <published>2017-12-02T08:02:21.000Z</published>
    <updated>2017-12-05T14:03:31.073Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/5875188-15ad88a4b9c019ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&emsp;&emsp;GitHub 是一个面向开源及私有软件项目的托管平台，因为只支持Git作为唯一的版本库格式进行托管，故名 GitHub。</p><h1 id="Git的安装"><a href="#Git的安装" class="headerlink" title="Git的安装"></a>Git的安装</h1><ol><li>安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a></li><li>在使用GitHub之前首先要安装<a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></li><li>具体如何安装可以看<a href="https://jingyan.baidu.com/article/90895e0fb3495f64ed6b0b50.html" target="_blank" rel="noopener">这篇</a></li></ol><h1 id="GitHub初体验"><a href="#GitHub初体验" class="headerlink" title="GitHub初体验"></a>GitHub初体验</h1><p>在进入<a href="https://github.com" target="_blank" rel="noopener">GitHub</a>官网，你首先要注册一个账号(ps:这个就是你个人账户，牢记！)<br><img src="http://upload-images.jianshu.io/upload_images/5875188-3f950b6801ca530a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="GitHub注册"></p><p><strong>既然我们都已经迈出了第一步，是不是该体验起飞的感觉了！</strong></p><h1 id="Github仓库的创建"><a href="#Github仓库的创建" class="headerlink" title="Github仓库的创建"></a>Github仓库的创建</h1><p>不急，我们先进入主页我们会看到右边有这么一个大绿色按钮<img src="http://upload-images.jianshu.io/upload_images/5875188-d5eb719b1df0d063.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>毫不犹豫的按下它吧！！！这就是你以后经常需要触碰的仓库！<img src="http://upload-images.jianshu.io/upload_images/5875188-489861b0bb33638e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>因为我勾选了自动创建README，所以界面是这样的</p><p><img src="http://upload-images.jianshu.io/upload_images/5875188-bea021cb4078c0d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><strong>好了，到了这一步说明已经成功了一半，仓库建好了，那么我们怎么才能把这远程仓库能clone到我们本地呢？</strong><br>仔细的你一定看到了又出现了一个大绿色按钮，没错，这就是我们的主角！点开它，你会发现右上角有个<strong>Use SSH</strong>(这是个切换按钮，记得切换到SSH)</p><p><img src="/images/GitHub/SSH.gif" alt=""></p><p>那么问题来了，<a href="http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html" target="_blank" rel="noopener">SSH</a>是啥？我没有这玩意儿啊，该怎么办？不慌！这时候该我们的Git登场了！(blingbling滑稽)</p><h1 id="Git初体验"><a href="#Git初体验" class="headerlink" title="Git初体验"></a>Git初体验</h1><ul><li>首先打开我们的Git Bash (安装成功)</li><li>因为Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识。</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/5875188-cbcabe8f716ce752.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>然后我们可以查看我们电脑中是否已经存在过ssh，打下面两条命令就能看到，我已经安装过，所以显示存在，没有安装是显示不存在的。</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/5875188-53df3ff31496f5ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>接下来我们<a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/" target="_blank" rel="noopener">安装SSH</a> <code>ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</code>(<strong>记得替换你自己的邮箱</strong>),把这句代码输进Git中，它先要求你确认保存公钥的位置（.ssh/id_rsa），然后它会让你重复一个密码两次，如果不想在使用公钥的时候输入密码，可以留空，一直按回车结束，就成功了。</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/5875188-65ae659d83cda2c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>现在只需要我们去ssh目录下的id_rsa.pub中的钥匙给复制出来然后粘贴到GitHub的SSH中就行了</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/5875188-317383ab7b5396a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>回到GitHub中，点击我们的头像，然后下面会出现一个Settings。</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/5875188-81559db0a745b145.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>如图点击New SSH key</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/5875188-22764e975d7d473e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="http://upload-images.jianshu.io/upload_images/5875188-56190c8a443a6e19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>好了，现在完成了我们的SSH创建，接下来我们就能clone我们的仓库到本地啦！</li></ul><h1 id="Clone仓库到本地"><a href="#Clone仓库到本地" class="headerlink" title="Clone仓库到本地"></a>Clone仓库到本地</h1><ul><li>回到我们的clone按钮，切换到SSH，并且复制这段地址</li></ul><p><img src="http://upload-images.jianshu.io/upload_images/5875188-4ad0fffb24619408.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>选好你想放仓库的文件夹位置，并且右键点git bash here，输入<code>git clone git@github.com:xxx/test.git</code>(后面改成你们的地址哦)</li></ul><p><strong>然后静等仓库clone下来，然后就能愉快的玩耍GitHub啦！</strong><br><img src="http://upload-images.jianshu.io/upload_images/5875188-14b8d5f3f434237c.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/5875188-15ad88a4b9c019ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; 
      
    
    </summary>
    
      <category term="GitHub系列" scheme="http://yoursite.com/categories/GitHub%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="GitHub" scheme="http://yoursite.com/tags/GitHub/"/>
    
      <category term="Node.js" scheme="http://yoursite.com/tags/Node-js/"/>
    
  </entry>
  
</feed>
