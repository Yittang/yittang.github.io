<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[less、vue-router及mock数据坑]]></title>
    <url>%2F2018%2F01%2F22%2Fless%E3%80%81vue-router%E5%8F%8Amock%E6%95%B0%E6%8D%AE%E5%9D%91%2F</url>
    <content type="text"><![CDATA[安装less 在以前，在做一个项目之前，如果单纯用CSS去写样式，我会觉得写CSS好舒服，感觉是开发中最爽的时候，直到……我遇到了Less！没错，less是一门CSS的预处理语言，它扩展了 CSS 语言，增加了变量、Mixin、函数等特性，使 CSS 更易维护和扩展。Less 可以运行在 Node 或浏览器端。它会教会你有了它，你不会再单纯的想写CSS！因为我刚接触Vue，刚起步，尤其是去看它的文档介绍只有关于Sass(另一门预处理语言)配合脚手架的用法，所以在初次安装Less的时候各种报错(可能是我的姿势不对，嘿嘿)，其实很简单！ 要在Vue脚手架用Less，因为它并没有Less的插件，所以我们需要通过以下这条命令去安装Less及Less-loader到devDependencies(开发中使用的插件)npm install less less-loader --save-dev 安装好了依赖，那么就要检测下我们的项目到底能不能用Less呢？其实很简单，那就是在初始HelloWorld.vue文件中的style标签上加上lang=&#39;less&#39;关键字就可，看项目报不报错。 安装vue-router 因为我的项目在建立之初并没有直接安装vue-router依赖，所以现在需要我们手动去下载依赖包，并加入到我们的Vue脚手架中去使用。和上面安装Less的依赖一样，通过以下命令安装。npm install vue-router --save 注意了，这次安装最后是没有-dev的！因为我们的项目最后上线的时候还是需要用到vue-router的！所以，我们要安装到dependencies，看清哦！ 接下来就是引入vue-router。虽然我们做的是个小项目，但是本着我们看着舒心，后期好维护的初心(扯淡),我们引入vue-router就不直接在vue-cli的入口配置文件了，而是新建个router文件夹和index.js去配置路由。 目录建立好之后，就是在router文件下的index.js中配置路由了。首先要引入Vue、vue-router、组件，然后Vue启用vue-router，之后配置组件的路径就配置好router了，最后在vue入口配置文件(main.js)中引用和在App.vue中写好HTML即可。 HTML怎么写移步到官网 好了，到这里基本的vue-router一定初见成效了！ mock数据 在这里我们用express框架去简化实现我们mock数据，通过以下命令安装npm install express --save 然后在webpack.dev.conf.js文件中配置 最后在正常的url中输入/api/path就能看到数据了！例如：’localhost:8080/api/goods’ 如有帮助，请收藏本博客，谢谢！]]></content>
      <categories>
        <category>Vue2.x</category>
      </categories>
      <tags>
        <tag>Vue2.x</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue2的入坑第一步]]></title>
    <url>%2F2018%2F01%2F18%2FVue2%E7%9A%84%E5%85%A5%E5%9D%91%E7%AC%AC%E4%B8%80%E6%AD%A5%2F</url>
    <content type="text"><![CDATA[前言为什么会开始写关于Vue的入坑？对，没有错！就是入坑！不进坑，你怎么才能学的快？！言归正传，最近刚好学校期末结束了，没有那么多门课复习浪费时间了，也正好恰逢大四上结束开了毕设，也正正好好恰逢我的毕设项目是做一个整站，前后端全归我一人来做。所以，我就选了当下国内最火的主流前端框架，也是国内尤大开发的—Vue.js。当前这份vue系列博客只记录我开发过程的一些坑，且不为我最终毕设项目，而是在正式做毕设前的小项目。好了，废话不多讲，进正题！ 安装vue-cli 首先就是去Vue的官网去下载Vue脚手架，只要根据以下几步就能正确下载，如果觉得通过npm下载太慢，可以通过用淘宝镜像去下载。 在安装过程中，需要你设置关于脚手架的几个依赖，我都选择不安装，以后用到自己再去安装，当然你也可以选择安装，嘿嘿嘿。。。启动项目 时间过得好快，刚写完上面的一段博文，就安装好了vue-cli，那么接下来就是安装项目依赖，这样才能运行你的项目。当然你从GitHub上下载别人的项目时，在本地也要先装依赖噢！ 接下来就是来看看我们之前做的一切有木有成果拉！ 但如果你之前有接触过以前的脚手架，你会发现当前版本的脚手架感觉Low了好多！只因为我的装X利器没了！什么装X利器？！那就是run项目，会自动打开我的浏览器！现在没了！我还以后怎么向我的小伙伴们装一下！No急，跟我做一步！就能继续拥有这种能力了！ 找到我们的项目目录，然后根据我指出的路径找到这个js文件，里面你会发现有个设置属性，只要改为true就OK啦！赶紧去试试把！‘./config/index.js’ 最后只简单介绍下vue-cli的几个文件是干嘛用的,大概了解下，想要详细了解的请自行google。Version一定要看清楚你当前的脚手架版本噢！我就是因为最近的被这个新版脚手架搞的死去活来，才想记录下这篇踩坑路！希望能帮助到现在的你！ 如有帮助，请收藏本博客，谢谢！]]></content>
      <categories>
        <category>Vue2.x</category>
      </categories>
      <tags>
        <tag>Vue2.x</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git的使用教程]]></title>
    <url>%2F2017%2F12%2F25%2FGit%E7%9A%84%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[前言继上篇初步认识git与github之后，你一定觉得很不过瘾，为什么关于git命令行的这一重要部分像被阉割了一样，不要急，今天我就来说说git的使用！(前方多图高能预警！！！) master分支远程仓库的创建 首先在你可爱的GitHub创建一个仓库，这次我在初始化仓库的时候没有勾选自动生成readme，所以界面就会呈现如图所示，它会提示你在本地该怎么做！ git init—初始化本地仓库 要使用Git来管理版本，那么必须先初始化仓库。Git使用git init来初始化仓库的。如果初始化成功，就会在文件夹下生成一个.git的隐藏文件，这个隐藏文件就是管理我们当前仓库数据的地方，别手抖删除它噢！ git status—查看仓库的状态 git status命令用于显示Git仓库的状态。这是一个非常常用的命令，贯穿你整个Git生涯也不为过哦！所以请务必牢记！工作树和仓库在被操作的过程中，它们的状态就会被不断改变，接下来我们看下我们初始仓库的状态！ 我们可以看到我们当前所处是在master分支，红色的README.md处于untracked，它提示我们可以通过git add &lt;file&gt;这个命令来让它被Git仓库管理。 git add—向暂存区中添加文件 之前Git目录下的README.md文件并没有被Git管理，也就是说它并不会被记入Git仓库的版本管理对象中，要想让它成为Git仓库的管理对象，就使用git add &lt;file&gt;这个命令，让文件加入暂存区(Stage或Index)中。 这里我使用了git add .这个命令，其实这个命令跟git add &lt;file&gt;命令的区别就是前者会把你当前文件夹内的所有文件都被加入到Git的暂存区，而后者是只让你指定的文件加入到Stage(实际使用视个人情况而定)。 我们再来看此时READMEME.md的状态已经被改成了Changes to be committed。那么接下来你就可以将当前Stage中的文件实际保存到仓库的历史记录中。抑或你add错文件，你可以使用git rm --cached &lt;file&gt;命令让文件回退出Stage，这样之后你提交文件就不会包含这个文件。 git commit—保存仓库的历史记录 git commit命令可以将当前Stage里的文件实际保存到仓库的历史记录中。 切记在commit的时候一定要添加你这次改动了什么的提示信息，不然当别人去看你的提交或者以后你自己去查的时候，可能并不清楚这一次改动是做了什么，为了以后省事一定要加上-m “message”噢！ git log—查看提交日志 git log这条命令可以让你非常清楚的看到你以往仓库的提交的日志，包括可以查看什么人在什么时候进行了合并或者提交，以及操作前后有什么差别。 日志中我们可以看到一行黄色的commit，它旁边有一串’32912ba99e….’的哈希值，记住！这串哈希值是指向这个提交的！ 然后你可以看到下面是提交时间和人员还有做看什么的信息。 当然，如果你想查看某个指定文件的提交日志，你也可以使用git log &lt;file&gt;这个命令来看指定文件的日志。 git diff—查看更改前后的差别 git diff可以查看工作树、暂存区、最新提交之间的差别。 我们可以向README.md中添加些内容来看看这个命令的效果。 这里我添加了一句话，所以我们可以看到一行绿色的”+”显示，如果我们删除了某些东西，就会出现”-“。 在我将修改后的README文件添加到Stage之后，再用git diff HEAD去看看本次提交与最新一次提交的差别，我们就能一目了然。HEAD是指向最新一次提交的指针。 最好养成在commit之前，看下本次提交与最新一次提交的差别，这样就能保持一个很好的代码管理习惯噢！ 创建分支分支的概念 在我们初始的github仓库的时候，会生成一个默认的初始分支，那就是master，这也就是我们常说的主分支，其它个人创建的都是子分支。子分支会拥有当前master分支的一切代码，然后在这基础上去做自己的事，而不会干扰到master的正常开发。等分支的需求做完了，可以合并到master分支，这样master分支就会拥有子分支所做的功能了，是不是很酷！！！ git branch—显示分支一览表 git branch这个命令可以将当前Git仓库的所有分支都显示出来，且能让你清楚的知道当前你所处的分支是哪一条。 因为我现在没有创建分支，所以默认只有一条master分支，并且注意在它前面有个星号，这就代表了你当前所处分支是哪一条。 git checkout -b—创建、切换分支 我们可以用git checkout -b &lt;branch&gt;的命令直接创建分支，并且切换到这个新创建的分支上 当然你也可以把上面这个命令拆分，git branch &lt;branch&gt;用来创建分支，git checkout &lt;branch&gt;用来切换到这个分支上。 现在我们处于B分支，如果我们在这时候去修改README.md文件，看会不会影响到master分支下的README.md文件,然后进行提交，就能把改过的文件添加到B分支上面去了，下图B分支内的README文件的修改情况。 然后我们切换到master分支，去看看README文件有没有什么改动,我们可以清晰的看到原本README里面我加的那句话，在master分支的时候没有了！ 然后我们再回到刚才的B分支，用git checkout -或者git checkout B都是一样的操作，前者的那个“-”就是返回到上一个分支的意思。 git merge—合并分支 既然我们创建了分支，并且在分支做了一些代码的改动，而我们也希望master分支也拥有子分支的这些代码，此时我们就要将子分支合并到master上，这样master分支就拥有了子分支的一切代码，先切换到master分支,再合并B分支，此时master分支下的README就有了B分支修改的内容了。 git log –graph—以图表形式查看分支 此时我们可以通过git log --graph这条命令来查看所有分支所做的一切commit，非常的简洁明了。 更改提交的操作git reset—回溯历史版本 通过前面的几次练习，想必你已经基本熟悉Git的基本操作了吧！但是假如有一天我做的代码更改提交上去之后，我发现之前有一次的代码提交版本我现在需要，而我现在想不起来哪次的提交了，所以这时候用到了git reset命令和之前提的哈希值了。但是我们提交了那么多次，哪里能记得住哪次提交的哈希值，而且它还那么长，是不？所以这时候我们可以在master分支下执行git reflog指令来查看当前仓库的操作日志,一目了然的每次提交操作。 既然拿到了我们想要的哈希值，那么我们就能回溯到那个版本去了,因为我回溯到了刚创建A分支的时候，这时候的README是没有修改的，所以B分支修改了内容之后被合并到master分支时的内容也就没有了！ 在回溯后的版本的时候，我们想要在最初始版本的时候增加分支C并且修改README文件，，这样在历史版本中我们相当于在过去添加了C分支，当我们再回溯到B分支被合并之后的版本的时候，master再去合并C分支修改的内容的时候，master应该同时拥有B和C的代码修改。但是我们最后合并C分支的时候，因为master中现在已经拥有了B分支的修改代码，而C是没有的，所以这时候合并C的时候会出现代码冲突，这时候需要我们人工去修改。 解决冲突之后，我们就能使用git add和git commit两个命令来提交到master的历史记录里。 git commit –amend—修改提交信息 假如我们提交之后，感觉提交信息有点不符合我们最近这次次提交的工作，我们想要修改一下这个提交信息，那该怎么做呢？这时候用git commit --amend命令来修改提交信息，这时候我们可以看到提交信息被我改成了“Fix C”。 推送到远程仓库git remote add—添加远程仓库 既然我们本地仓库已经添加修改完毕了，那么就要把本地仓库给push到远程仓库去。但是Git怎么才能知道我们要push到哪个仓库呢？这时候就该用我们的git remote add命令来指定要push到哪个仓库了。 git push—推送至远程仓库 既然我们已经指定了要推送的仓库地址，那么接下来只要我们push当前分支过去就OK拉！我们可以看到远程仓库的master已经拥有了本地master分支的代码了，如果想要push本地的A、B、C分支至远程仓库，那么同样的操作就行。 结束语好了，Git的基本操作基本都在这了，是不是现在感觉有点晕晕的，没事！这是正常的，赶紧自己去动手试试，你就会马上融会贯通的！ 如有帮助，请收藏本博客，谢谢！]]></content>
      <categories>
        <category>GitHub系列</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>GitHub</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[剑指Offer第十五题：反转链表]]></title>
    <url>%2F2017%2F12%2F20%2F%E5%89%91%E6%8C%87-15%2F</url>
    <content type="text"><![CDATA[前言此系列为牛客网剑指Offer系列。撰写此博文只为记录点滴与总结。 反转链表输入一个链表，反转链表后，输出链表的所有元素。 原先链表如图一，反转之后如图二，原先的head指向第一个结点，现在指向最后一个结点，原先的第一个结点指向第二个结点，现在指向null，变成整个链表的最后一个结点，所以这时候我们需要引入两个指针(pre，next)，一个指向当前头结点的前一个结点也就是反转之后的null，另一个指向当前头结点的后一个结点，也就是当前第二个结点。接下来就是做反转了，先保存头节点的下一节点，也就是next指向的结点，之后头节点的下一节点指针指向pre，然后指针后移，第二个结点指向原先的头结点，如此往复。 123456789101112131415161718192021/*function ListNode(x)&#123; this.val = x; this.next = null;&#125;*/function ReverseList(pHead)&#123; // write code here if(!pHead) &#123; return false &#125;else &#123; let pre = null, //head前一结点 next = null //head后一结点 while(pHead) &#123; next = pHead.next //next保存当前结点的下一节结点 pHead.next = pre //原先头结点指向null pre = pHead //pre指向原先head，即后移指针 pHead = next //头结点指针指向后结点，即后移指针 &#125; return pre &#125;&#125; 如有帮助，请收藏本博客，谢谢！]]></content>
      <categories>
        <category>剑指Offer系列</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[剑指Offer第十四题：链表中倒数第K个结点]]></title>
    <url>%2F2017%2F12%2F18%2F%E5%89%91%E6%8C%87-14%2F</url>
    <content type="text"><![CDATA[前言此系列为牛客网剑指Offer系列。撰写此博文只为记录点滴与总结。 链表中倒数第K个结点输入一个链表，输出该链表中倒数第k个结点。 在链表的元素个数不为零或者k是正数的情况下，用两个指针分别去指向这个链表的头部，其中指针1正向走K步，也就是说指针1和指针2之间的长度是K，那么此时只要我们两个指针同时开始正向走，直到指针1走到链表的末尾，那么指针2此时就是指向倒数第K个元素。 123456789101112131415161718192021function FindKthToTail(head, k)&#123; // write code here if(head === null || k &lt;= 0) &#123; return false &#125; let pre = head let inext = head for(let i=1; i&lt;k; i++) &#123; if(pre.next) &#123; pre = pre.next &#125;else &#123; return false &#125; &#125; while(pre.next) &#123; pre = pre.next inext = inext.next &#125; return inext&#125; 如有帮助，请收藏本博客，谢谢！]]></content>
      <categories>
        <category>剑指Offer系列</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[队列]]></title>
    <url>%2F2017%2F12%2F17%2F%E9%98%9F%E5%88%97%2F</url>
    <content type="text"><![CDATA[队列之前讲解了一下对于栈的概念以及用JS去实现一个栈的方法，那么今天再来介绍下与栈很相近的一个数据结构：队列。其实编程中的很多数据结构及理念都来源于生活，今天要讲的队列其实就是生活中的排队，谁先排进队伍，那么谁先受到服务，然后最先出列，这一点是跟栈截然相反的地方。队列是遵循FIFO(First In First Out)原则的一组有序的项，队列在尾部添加新元素，在顶部移除新元素。 创建队列1234567891011121314151617181920212223242526272829class Queue &#123; constructor() &#123; this.items = [] &#125; enqueue(element) &#123; this.items.push(element) &#125; //尾部添加元素 dequeue() &#123; return this.items.shift() &#125; //顶部移除元素 front() &#123; return this.items[0] &#125; //返回队列的第一个元素 isEmpty() &#123; return this.items.length === 0 &#125; //队列是否为空 size() &#123; return this.items.length &#125; //队列的长度 print() &#123; console.log(this.items.toString()) &#125; //打印队列&#125; 队列中的方法跟之前介绍栈的方法都很相近，我相信只要你理解之前那篇栈，那么这段队列的方法，你也一定能理解，实在不懂，可以去翻看栈那篇文章。 我们生活中的队列当然不止普通的队列先进先出这种原则，当然还有特殊的队列，就如医院看病，一个生命垂危的病人和一个只是小病的病人相比，医院应当优先处理这个生命垂危的病人，而不是按照谁先来看病谁先就医，这样会出人命。所以队列也有这种特殊情况，这就是优先队列。 创建优先队列12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152class QueueElement &#123; constructor(element, priority) &#123; this.element = element this.priority = priority &#125;&#125;class PriorityQueue &#123; constructor() &#123; this.items = [] &#125; enqueue(element, priority) &#123; let isPriority = false let queueElement = new QueueElement(element, priority) for(let i=0; i&lt;this.items.length; i++) &#123; if(queueElement.priority &lt; this.items[i].priority) &#123; this.items.splice(i, 0, queueElement) isPriority = true break &#125; &#125; if(!isPriority) &#123; this.items.push(queueElement) &#125; &#125; dequeue() &#123; return this.items.shift() &#125; front() &#123; return this.items[0] &#125; isEmpty() &#123; return this.items.length === 0 &#125; size() &#123; return this.items.length &#125; print() &#123; for(let i=0; i&lt;this.items.length; i++) &#123; console.log(`第$&#123;i&#125;个队列$&#123;this.items[i].element&#125;和其优先级是$&#123;this.items[i].priority&#125;`) &#125; &#125;&#125; 优先队列的做法有两种：一种就是我上面这种，在push之前就判断优先级然后放入，这样在出队列的时候就不用再判断了；另一种就是push时不判断，在pop的时候判断它的优先级，有兴趣的话你可以试试。我就只介绍我的这种思路，如果新添加元素的priority小于原队列元素的priority的值，那么就把新元素插入在其前面。如果没有优先的机制，就正常push就行了。 除了以上两种队列，其实还有一种很好玩的队列：循环队列。我们应该都知道生活中一个游戏叫做击鼓传花，意思就是大家围成一个圈，从第一个人开始传花，接下去每个人接到这个花然后传下去，直到某一刻传花停止，花在谁手里谁就出局，直到人数为1时才算结束。接下来就是来模拟这种游戏效果。1234567891011121314151617181920function Pass(nameList, num) &#123; let queue = new Queue() for(let i=0; i&lt;nameList.length; i++) &#123; queue.enqueue(nameList[i]) console.log(queue.items) &#125; while(queue.size() &gt; 1) &#123; let eliminated = "" for(let j=0; j&lt;num; j++) &#123; queue.enqueue(queue.dequeue()) &#125; eliminated = queue.dequeue() console.log(`此局淘汰者是：$&#123;eliminated&#125;`) &#125; return queue.items &#125;let names = ['John', 'Li', 'Mike', 'Hei', 'Mis']let winner = Pass(names, 7)console.log(`最终获胜者是： $&#123;winner&#125;`) 首先我们需要第一种普通队列的类，我们接到一个玩游戏的名单，把它传入队列中，然后就是游戏开始，如果人数大于1，就一直传花下去，每次都要把一个人给淘汰出去，直到人数只有1个人的时候才是最后的胜利者。那么每次传花我们怎么才能算传几次来淘汰一个人呢？这时候就通过我们一开始输入的传花次数，一旦达到传花次数，那么当前这个人就被淘汰，如此循环下去。 如有帮助，请收藏本博客，谢谢！]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[剑指Offer第十三题：调整数组顺序使奇数位于偶数前面]]></title>
    <url>%2F2017%2F12%2F17%2F%E5%89%91%E6%8C%87-13%2F</url>
    <content type="text"><![CDATA[前言此系列为牛客网剑指Offer系列。撰写此博文只为记录点滴与总结。 调整数组顺序使奇数位于偶数前面输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。 这道题给了个无序的数组，也就是说我们并不清楚这个数组里面哪个位置是奇数，哪个是偶数，那么我就只能去遍历每个元素，然后做判断是奇还是偶，奇的存在一个新数组中，偶的存在另一个中，最后合并起来就呈现出我们需要的新数组了。 123456789101112131415161718function reOrderArray(array)&#123; // write code here if(array.length === 0) &#123; return false &#125; let arrLeft = [], arrRight = [] for(let i=0; i&lt;array.length; i++) &#123; if(array[i] % 2 === 0) &#123; arrRight.push(array[i]) &#125;else &#123; arrLeft.push(array[i]) &#125; &#125; array = arrLeft.concat(arrRight) return array&#125; 如有帮助，请收藏本博客，谢谢！]]></content>
      <categories>
        <category>剑指Offer系列</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[栈]]></title>
    <url>%2F2017%2F12%2F16%2F%E6%A0%88%2F</url>
    <content type="text"><![CDATA[栈今天就来讲讲栈的一些理解。对于什么叫栈，栈的诞生这些在网上可以自行去查阅，我就不再叙述。只要知道栈最明显的一个特点就是：后进先出，后进先出从字面上就是后进的元素会先出去，就像弹夹里面的子弹一样，后进的子弹在先进的子弹的上面，然后发射出去的是最后进的子弹。既然弹夹有弹夹底和弹夹头，那么栈也同样拥有，先进元素所在的一端就是栈底，后进元素所在的一端就是栈顶，只要清楚这个概念，基本上你也就能熟练使用栈了，如下图就是个简单的栈图。 光知道栈的这些简单的概念是不行的，我们需要用JS去实现出来！ 创建栈1234function Stack() &#123; let items = [] //用数组来表示这个栈//各种属性和方法 &#125; 向栈添加元素 很简单，就是用数组里的push方法，往数组后添加元素。123let push = element =&gt; &#123; items.push(element)&#125; 从栈中移出元素 栈顶移除元素，就是数组中的pop方法。123let pop = () =&gt; &#123; items.pop()&#125; 查看栈顶的元素 栈顶元素所在位置就是数组的最后一位123let peek = () =&gt; &#123; return items[items.length - 1]&#125; 检查栈是否为空 栈的长度是否为零123let isEmpty = () =&gt; &#123; return items.length === 0&#125; 清空栈 只要把栈重新赋个空值就行123let clear = () =&gt; &#123; items = []&#125; 打印栈内的元素 把栈内的元素转成字符串形势输出到控制台显示。123let print = () =&gt; &#123; console.log(items.toString())&#125; 全部代码1234567891011121314151617181920212223242526272829class Stack &#123; constructor() &#123; this.items = [] &#125; push(element) &#123; this.items.push(element) &#125; pop() &#123; this.items.pop() &#125; peek() &#123; return this.items[this.items.length - 1] &#125; isEmpty() &#123; return this.items.length === 0 &#125; clear() &#123; this.items = [] &#125; print() &#123; console.log(this.items.toString()) &#125;&#125; 栈的应用 十进制数转换成任意进制数123456789101112131415161718function baseConverter(decNumber, base) &#123; var remStack = new Stack(), rem, baseString = '', digits = '0123456789ABCDEF' while (decNumber &gt; 0) &#123; rem = Math.floor(decNumber % base); remStack.push(rem); decNumber = Math.floor(decNumber / base); &#125; while(!remStack.isEmpty()) &#123; baseString += digits[remStack.items.pop()] &#125; return baseString &#125;console.log(baseConverter(10,16)) 如有帮助，请收藏本博客，谢谢！]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[剑指Offer第十二题：数值的整数次方]]></title>
    <url>%2F2017%2F12%2F16%2F%E5%89%91%E6%8C%87-12%2F</url>
    <content type="text"><![CDATA[前言此系列为牛客网剑指Offer系列。撰写此博文只为记录点滴与总结。 数值的整数次方给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。 考虑2种边界值的情况。如果exponent小于零，base为零，那么这样分母就为零，这是错误的，直接返回false。如果exponent为零，base无论为何值，值都为1。这是两种极端的情况，但是还有本题如果exponent小于零，而base不为零，那么值就会是分式，和exponent大于零的时候计算会出现两种值，需要两个变量来存这两种情况，而我们要做的是无论exponent是否是正数还是负数，都把最后的值存在一个变量里，最后返回的时候判断一下就行，所以当exponent为负数时，把它取正，用一个变量来记录exponent其实为负数，这样在最后计算的时候不会分不清exponent到底是正数还是负数的情况。说完了指数的正负零的情况，那么来分析怎么才能计算base应该自乘多少次呢？题目给出指数exponent肯定为整数，那么一个整数我们用二进制去表示，我们能够通过这个二进制数每次右移一位，能得到这个二进制需要右移几次才会变成零，这二进制右移几次也就是base自乘几次。或者每次都减去1也是同一个道理，但记住，如果用减1的方法，要在循环之前先减1!123456789101112131415161718192021function Power(base, exponent)&#123; // write code here let minus = true if(exponent &lt; 0) &#123; if(base === 0) &#123; return false &#125; exponent = -exponent minus = false &#125;else if(exponent === 0) &#123; return 1 &#125; let result = base while(exponent != 0) &#123; exponent &gt;&gt;= 1 result *= base &#125; return minus ? result : (1/result)&#125; 如有帮助，请收藏本博客，谢谢！]]></content>
      <categories>
        <category>剑指Offer系列</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[剑指Offer第十一题：二进制中1的个数]]></title>
    <url>%2F2017%2F12%2F13%2F%E5%89%91%E6%8C%87-11%2F</url>
    <content type="text"><![CDATA[前言此系列为牛客网剑指Offer系列。撰写此博文只为记录点滴与总结。 二进制中1的个数输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。 假设输入一个10，那么它的二进制就是0000 1010，要得到这个二进制中1的个数，就想办法右移这个二进制，那么1的右移就通过减去1来实现。每次减一，就会让最右边(不一定是第0位)的1向右移一位，那么此时就变成了0000 1001，这时候这个二进制就是十进制的9，和原数相与，那么就得到了0000 1000。这时候你应该能想到每次这样操作，就能遍历出所有1。 12345678910function NumberOf1(n)&#123; // write code here let count = 0 while(n !== 0) &#123; n = n &amp; (n-1) count++ &#125; return count&#125; 如有帮助，请收藏本博客，谢谢！]]></content>
      <categories>
        <category>剑指Offer系列</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[剑指Offer第十题：矩形覆盖]]></title>
    <url>%2F2017%2F12%2F12%2F%E5%89%91%E6%8C%87-10%2F</url>
    <content type="text"><![CDATA[前言此系列为牛客网剑指Offer系列。撰写此博文只为记录点滴与总结。 矩形覆盖我们可以用2*1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2*1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？ 碰到这种题，先从头开始试试有没有规律可循。如果n等于零，那么铁定是0种方法。如果n是1，那么也就只有一种方法。如果n是2，那么就两种放法。当n是3，第一次如果横着放，那么就剩下F(3-1)种放法，如果第一次竖着放，第二次也只能竖着放，最后只剩下F(3-2)种放法。从这里其实可以已经看出这题有点像我们之前做的斐波那契数列，你不妨可以再试试后面几个值。既然是斐波那契数列，那就好办了，除了前三项是特定之外，后面的每一项都是前两项之和。123456789101112function rectCover(number)&#123; // write code here let arr = [0, 1, 2] if(number &lt;=2) &#123; return arr[number] &#125; for(let i=3; i&lt;=number; i++) &#123; arr[i] = arr[i-1] + arr[i-2] &#125; return arr[number]&#125; 如有帮助，请收藏本博客，谢谢！]]></content>
      <categories>
        <category>剑指Offer系列</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[剑指Offer第九题：变态跳台阶]]></title>
    <url>%2F2017%2F12%2F11%2F%E5%89%91%E6%8C%87-9%2F</url>
    <content type="text"><![CDATA[前言此系列为牛客网剑指Offer系列。撰写此博文只为记录点滴与总结。 变态跳台阶一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。 这道题就是前一题的衍生题。如果青蛙第一次跳1级，那么还剩下F(n-1)种跳法，第一次跳2级，那么还剩下F(n-2)种跳法。。。如果跳n-1级，那么还剩下F(n-(n-1))种跳法。所以F(n)=F(n-1)+F(n-2)+…+F(2)+F(1)，此时我们可以用到高中的数学知识，得出F(n-1)=F(n-2)+F(n-3)+…+F(2)+F(1),两式相减，所以此时得到F(n)=2*F(n-1)。1234567891011function jumpFloorII(number)&#123; // write code here if(number &lt;= 0) &#123; return false &#125;else if(number === 1) &#123; return 1 &#125;else &#123; return 2*jumpFloorII(number -1) &#125;&#125; 在网上还看到一种超厉害的代码,二进制移位操作 每个台阶都有跳与不跳两种情况（除了最后一个台阶），最后一个台阶必须跳。所以共用2^(n-1)中情况 12345function jumpFloorII(number)&#123; // write code here return 1 &lt;&lt; (number-1)&#125; 如有帮助，请收藏本博客，谢谢！]]></content>
      <categories>
        <category>剑指Offer系列</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[双向链表]]></title>
    <url>%2F2017%2F12%2F11%2F%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[双向链表上次已经整理过关于单向链表的知识点了，那么今天就来说说关于双向链表的知识吧。何为双向链表呢？它跟单向链表唯一的不同就在于，每个节点不再只是单纯的指向下一个节点了，而是指向双向，一个链向下一个节点，一个链向上一个链表，如图所示。 双向链表的优点它比链表多一个指向，就是因为单向链表在错过要取的元素，每次都要从头来过，所以双向链表就承载了这一使命，错过的元素不需要每次重新迭代。 Node类12345function Node(element) &#123; this.element = element this.pre = null //新增 this.next = null&#125; 它(this.pre)比单向链表多了一个指向前一节点的指针。 DoublyLinkedList类12345function DoublyLinkedList() &#123; this.head = null this.length = 0 this.tail = null //新增&#125; 它(tail)比单向链表新增了一个指向链表尾部的指针。 双向链表的方法insert 在双向链表任意位置添加元素12345678910111213141516171819202122232425262728293031323334353637DoublyLinkedList.prototype.insert = function (position, element) &#123; if(position &gt;= 0 &amp;&amp; position &lt;= this.length) &#123; let node = new Node(element), current = this.head, previous, index = 0 if (position === 0) &#123; if (!this.head) &#123; this.head = node this.tail = node &#125;else &#123; node.next = current current.pre = node this.head = node &#125; &#125; else if (position === this.length) &#123; current = this.tail current.next = node node.pre = current this.tail = node &#125; else &#123; //position !== 0 while (index &lt; position) &#123; previous = current current = current.next index++ &#125; previous.next = node node.next = current node.pre = previous current.pre = node &#125; //position !== 0 this.length++ &#125; else &#123; return false &#125;&#125; 看到上面一大堆代码是不是感觉很害怕？别怕，其实双向链表的insert方法跟单向链表的没有差距很多，只是新增了一些而已。还是分情况来讨论新元素插入在链表的几种位置情况。第一种：新元素直接在头节点插入，如果头节点本身不存在，那么头节点此时就指向了新元素，此时链表只有当前的新元素，也就是最后一个元素，那么tail指向这个最后一个元素。第二种：新元素插入在链表的尾部，因为我们链表当中有个属性是指向整个链表的尾部，所以我们直接可以把当前元素指向这个tail，这样我们能直接获取链表的最后一个节点，此时添加新元素，只要把尾元素的下一指针指向新元素，新元素的前一指针指向原最后的元素，tail指向这个新元素，那么就完成了新元素插入链表尾部的事件。第三种，就是向链表的中间某一位置插入新元素，这跟单向链表的方式很类似，从头开始遍历整个链表，取到要插入位置的前一元素(previous)和当前元素(current，也是即将成为新元素的后一元素)，因为是双向链表，所以我们的previous.next指向新元素，新元素的pre指针指向previous，新元素的next指针指向current节点，current的pre指针指向新元素。最后千万别忘了，让真个链表的长度加加！ removeAt 在任意位置移除元素1234567891011121314151617181920212223242526272829303132DoublyLinkedList.prototype.removeAt = function(position) &#123; if(position &gt;= 0 &amp;&amp; position &lt; this.length) &#123; let current = this.head, index = 0, previous if(position === 0) &#123; this.head = current.next if(this.length === 1) &#123; this.tail = null &#125;else &#123; this.head.pre = null &#125; &#125;else if(position === this.length-1) &#123; current = this.tail this.tail = current.pre current.pre.next = null &#125;else &#123; while (index &lt; position) &#123; previous = current current = current.next index++ &#125; previous.next = current.next current = current.next current.pre = previous &#125; this.length-- return current.element &#125;else &#123; return false &#125;&#125; 如果你理解了之前的insert方法，那么对于理解removeAt方法对你来说并不会有什么太大难度。好，继续来分析这个方法。对于removeAt方法，我们还是要分情况讨论。第一种：删去头节点，很简单，只要头节点指向当前元素的下一节点就行了，但是在这里当心噢！因为可能整个链表只有这一个节点，所以如果只有这一个节点，那么要把tail给置空，如果不是，那就要把新头节点的pre属性置空。第二种情况：删去链表尾部，我们能通过tail来得到链表的最后一个节点，所以我们只要把最后一个节点的next属性置空，并且tail指向它就行了。第三种情况：在链表的任意位置删除节点，那么我们就又要遍历整个链表了，直到遍历出要被删的节点(current)，那么删除它更简单，current的previous节点指向它的后一节点，它的后一节点指向previous就行了。 末尾：是不是觉得现在对于链表的认知又提升了一不？是不是超简单的？赶紧自己也动手撸一个链表吧！！！ 如有帮助，请收藏本博客，谢谢！]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[剑指Offer第八题：跳台阶]]></title>
    <url>%2F2017%2F12%2F10%2F%E5%89%91%E6%8C%87-8%2F</url>
    <content type="text"><![CDATA[前言此系列为牛客网剑指Offer系列。撰写此博文只为记录点滴与总结。 跳台阶一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。 题目中说明青蛙要么跳1级，要么就2级。假如只有1级台阶，当前情况只能跳1级。假如有2级台阶，那么显然有两种跳法，第一次要么跳1级，要么直接跳2级。那当跳n级台阶时，如果我们把它看成是n的函数(n&gt;2)。假如第一次跳1级台阶，那么就剩下F(n-1)种跳法，如果第一次跳2级，那么就剩下F(n-2)种跳法。所以F(n)=F(n-1)+F(n-2)。思路虽然是这样，但如果我们通过递归函数去求得这种结果，会让程序的执行效率非常的低，所以我们需要去想有没有其它更好的方法。还有记得前一题斐波那契数列么？如果我们需要去获取这个数列的最后一项，那么我们可以通过循环把前两个值分别赋值给两个变量，只要把这两个变量相加就是我们所需的结果。1234567891011121314151617181920function jumpFloor(number)&#123; // write code here if(number &lt;= 0) &#123; return false &#125;else if(number === 1) &#123; return 1 &#125;else if(number === 2) &#123; return 2 &#125; let pre = 1, next = 2, result = 0 for(let i=3; i&lt;=number; i++) &#123; result = pre + next pre = next next = result &#125; return result&#125; 如有帮助，请收藏本博客，谢谢！]]></content>
      <categories>
        <category>剑指Offer系列</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[单向链表]]></title>
    <url>%2F2017%2F12%2F09%2F%E9%93%BE%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[单向链表作为一个程序猿，我相信只要整日与代码为伍的动物，那肯定离不开数据结构这种恶心又让人爱的数学思维，那么今天我就整理了一下关于链表的知识。 何为链表？链表，即存储有序的元素的集合，是一种线性表，但不会按线性的顺序去存储数据。为什么会有链表呢？那就不得不稍微提一下我们经常接触的另一个数据结构：数组。数组的结构非常容易理解，并且能随意获取数组每一个位置的数据，但也有它不足之处，那就是从数组的头部或中间任意位置插入或删除项的成本非常高，所以链表诞生而出。(哈哈哈，各位看官看看就好，莫要太当真。)链表内每个元素不像数组一样，只是单纯的存储数据，而是每个元素都由一个存储元素本身的节点和一个指向下一个元素的指针组成。如下图所示，元素一个指向下一个，直到null为止。 链表的优点链表不像数组那样，添加一个元素时，需要移动其它元素，而是只要断开想添加的地方的指针，指向要添加的元素，再把新添加元素的指针指向原先被断开的元素，如图所示。 好了，通过以上的介绍，想必现在你的脑海里一定有了对于链表一定的概念了，那么接下来让我们来看看如何创建单向链表的。 Node类创建链表1234function Node(element) &#123; this.element = element this.next = null&#125; LinkedList类链表的方法1234567function LinkedList() &#123; this.head = null //头节点 let length = 0 //链表长度 this.append = (element) =&gt; &#123;...&#125; //链尾添加元素 this.insert = (position, element) =&gt; &#123;...&#125; //特定位置插入元素 this.removeAt = (element) =&gt; &#123;...&#125; //移除特定元素&#125; 接下来就分别看链表的方法 append12345678910111213this.append = (element) =&gt; &#123; let node = new Node(element) if(this.head === null) &#123; this.head = node &#125;else &#123; let current = this.head while(current.next) &#123; current = current.next &#125; current.next = node &#125; length++ &#125; 我们来分析下，当要向链表添加某个元素时，首先判断是否存在头节点。如果头节点为空，那么我们就把头节点指向我们创建的元素节点，那么也就是整个链表现在只有头节点。如果不为空，因为append方法是向链表的尾部添加新元素，所以我们要找到这个链表的尾部，那么什么情况下说明我们当前元素是最后一个元素？只有当最后一个元素的指针指向null的时候就是了，所以先把当前指针指向头节点，然后开始遍历整个链表直到最后一个元素，此时把最后一个元素的指针指向我们新元素即可。 insert123456789101112131415161718192021222324this.insert = (position, element) =&gt; &#123; if(position &gt;= 0 &amp;&amp; position &lt;= length) &#123; let node = new Node(element), current = this.head, //当前元素指向头节点 previous, //新元素的前一元素 index = 0 if(position === 0) &#123; //头节点位置插入新元素 node.next = current this.head = node &#125;else &#123; while(index &lt; position) &#123; previous = current current = current.next index++ &#125; previous.next = node node.next = current &#125; length++ return true &#125;else &#123; return false //位置不合理，直接返回 &#125;&#125; 首先要判断要插入新元素的位置是否在链表长度范围内，如果合理才去插入新元素。插入新元素的位置两种可能，一种在头节点，另一种在链表的中间的某一位置，因为这两种情况都要从头节点开始，所以我们把当前元素指向头节点，这样方便我们后面去遍历整个链表。先来看如果我们的新元素要插在头节点位置，那么我们的新元素的指针指向当前元素，头节点指向新元素，这就完成了头节点插入新元素。如图 如果新元素插在链表的任意位置，那么就要从头开始遍历整个链表，所以我们就要循环访问整个链表，直到当index值等于我们要插入新元素位置的值一样时，跳出循环，此时我们得到两个元素，一个previous，是新元素的前一个元素，current当前值，是新元素的后一个元素，所以只要让前一个元素指向性元素，新元素指向当前值就完成了insert方法。 removeAt12345678910111213141516171819this.removeAt = (position) =&gt; &#123; if(position &gt;= 0 &amp;&amp; position &lt; length) &#123; //删除链表的位置合理 let current = this.head, index = 0, previous if(position === 0) &#123; this.head = current.next &#125;else &#123; while(index &lt; position) &#123; previous = current current = current.next index++ &#125; previous.next = current.next length-- &#125; return current.element &#125;&#125; 任意位置删除链表的元素，其实跟insert方法非常的相似。我们先来看假如删除头元素，只要让头节点指向当前元素的下一节点就是删除了。另一种情况是任意位置删除元素，我们还是要从头开始遍历整个链表，要被删除的元素的前一元素只要指向被删除元素的下一节点也就算删除了。 好了，关于单向链表的知识点就讲到这，如有需要请自己多多去深入挖掘。:) 如有帮助，请收藏本博客，谢谢！]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[剑指Offer第七题：斐波那契数列]]></title>
    <url>%2F2017%2F12%2F09%2F%E5%89%91%E6%8C%87-7%2F</url>
    <content type="text"><![CDATA[前言此系列为牛客网剑指Offer系列。撰写此博文只为记录点滴与总结。 斐波那契数列大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项。n&lt;=39 斐波那契数列，简而言之，就是这个数列就是F(0)=0，F(1)=1，F(n)=F(n-1)+F(n-2)…从第二项开始这个数列每一项都是前两项的和，所以思路也就是求前两项之和。1234567891011121314function Fibonacci(n)&#123; // write code here if(n &gt; 39 || n &lt; 0) &#123; return false &#125; let arr = [] arr[0] = 0 arr[1] = 1 for(let i=2; i&lt;=n; i++) &#123; arr[i] = arr[i-1] + arr[i-2] &#125; return arr[n] &#125; 如有帮助，请收藏本博客，谢谢！]]></content>
      <categories>
        <category>剑指Offer系列</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[剑指Offer第六题：旋转数组的最小数字]]></title>
    <url>%2F2017%2F12%2F08%2F%E5%89%91%E6%8C%87-6%2F</url>
    <content type="text"><![CDATA[前言此系列为牛客网剑指Offer系列。撰写此博文只为记录点滴与总结。 旋转数组的最小数字把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。 根据题目考虑两种情况，一种数组没有元素，则返回0，另一种有元素，但是是经过旋转之后并且非递减排序的，那么此时要找到数组的最小值就不能直接获取了。这时候要获取数组的最小值虽然能通过遍历能获得，但是效率太低，所以我采用了二分法。因为题目原数组是有序的，只是经过旋转之后变的没有序，但是有一点得清除，虽然经过旋转之后没有序，但是在最小值的左边和右边都是递增型的，这时候通过数组的首值(left)中间值(mid)进行比较，当首值小于等于中间值时，说明中间值在前递增数组内，那么最小值在中间值的右边，所以此时把mid的index赋给left的index，这样再去遍历右边的数组，而不需要遍历左边的数组 ；如果首值大于中间值时，说明中间值在右边的递增数组内，那么最小值在中间值的左边，所以此时把mid的index赋给right的index，这样也就不用去遍历右边的数组。往后以此类推。 可能有点绕，还是上代码比较能让你理解。12345678910111213141516171819202122232425262728293031323334function minNumberInRotateArray(rotateArray)&#123; // write code here let len = rotateArray.length if(!len) &#123; return 0 &#125; let left = 0, right = len - 1, mid = 0 while(rotateArray[left] &gt;= rotateArray[right]) &#123; //说明数组旋转过 if(right - left == 1) &#123; //数组只有两个元素，最小值一定是第二个 mid = right break &#125; mid = Math.floor((right + left)/ 2) //首值，中间值，最后值相同只能去遍历 if (rotateArray[left] == rotateArray[mid] &amp;&amp; rotateArray[right] == rotateArray[mid]) &#123; let min = rotateArray[left] for(let i=left+1; i&lt;=right; i++) &#123; if(rotateArray[i] &lt; min) &#123; min = rotateArray[i] &#125; &#125; return min &#125; if(rotateArray[left] &lt;= rotateArray[mid]) &#123; left = mid &#125;else &#123; right = mid &#125; &#125; return rotateArray[mid]&#125; 如有帮助，请收藏本博客，谢谢！]]></content>
      <categories>
        <category>剑指Offer系列</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[剑指Offer第五题：用两个栈实现队列]]></title>
    <url>%2F2017%2F12%2F07%2F%E5%89%91%E6%8C%87-5%2F</url>
    <content type="text"><![CDATA[前言此系列为牛客网剑指Offer系列。撰写此博文只为记录点滴与总结。 用两个栈实现队列用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型 队列跟栈稍微有点不同,是只允许在一端进行插入操作，在另一端进行删除操作的线性表。但从其字面意思上就能猜到跟我们日常生活中排队一样，谁先进的队伍谁在前面，也就会先出去。所以队列的意义就是：先进先出，从尾部进入，从头部出去。所以，我们这里又可以愉快的用到JS数组的方法了，不清楚js数组的方法的可以看mdn。言归正传，数组常用的方法push就是将一个或多个元素添加到数组的末尾，shift就是从数组中删除第一个元素。这不就是我们需要的队列的方法么？好了接下来一切都简单了。我们只需要一个模拟的栈用push，另一个用来pop。12345678910111213let stackA = [], stackB = []function push(node)&#123; // write code here stackA.push(node)&#125;function pop()&#123; // write code here stackB = stackA.shift() return stackB&#125; 如有帮助，请收藏本博客，谢谢！]]></content>
      <categories>
        <category>剑指Offer系列</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[剑指Offer第四题：重建二叉树]]></title>
    <url>%2F2017%2F12%2F06%2F%E5%89%91%E6%8C%87-4%2F</url>
    <content type="text"><![CDATA[前言此系列为牛客网剑指Offer系列。撰写此博文只为记录点滴与总结。 重建二叉树输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。 请先了解什么叫二叉树 因为输入的是前序序列和中序序列，那么我们能直接通过前序序列知道二叉树的根节点，然后通过中序序列直接知道二叉树的左子树(此记为中左子树)和右子树(此记为中右子树)有哪些节点。这样我们就能通过中左子树来得到前序序列中的左子树(记为前左子树)和右子树(记为前右子树)。然后通过递归思想，我们把前左子树传入当作新前序序列，中左子树当作新中序序列，来得到左子树的头结点和左子树包含的哪些节点，以此递归下去，右子树也是一样的思想。1234567891011121314151617181920212223/* function TreeNode(x) &#123; this.val = x; this.left = null; this.right = null;&#125; */function reConstructBinaryTree(pre, vin)&#123; // write code here if(!pre.length || !vin.length) &#123; return false &#125; const val = pre[0] //根节点 const index = vin.indexOf(val) //根节点在右子树的index位置 let preLeft = pre.slice(1, index+1) //前左子树 let preRight = pre.slice(index+1) //前右子树 let vinLeft = vin.slice(0, index) //中左子树 let vinRight = vin.slice(index+1) //中右子树 return &#123; val: val, left: reConstructBinaryTree(preLeft, vinLeft), right: reConstructBinaryTree(preRight, vinRight) &#125;&#125; 如有帮助，请收藏本博客，谢谢！]]></content>
      <categories>
        <category>剑指Offer系列</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[剑指Offer第三题：从尾到头打印链表]]></title>
    <url>%2F2017%2F12%2F05%2F%E5%89%91%E6%8C%87-3%2F</url>
    <content type="text"><![CDATA[前言此系列为牛客网剑指Offer系列。撰写此博文只为记录点滴与总结。 从尾到头打印链表输入一个链表，从尾到头打印链表每个节点的值。 什么叫链表，如果不清楚的可以先去了解下，接下来直接进入正题！ 题目：反向打印链表的所有节点。因为链表中每个节点包含的是本身节点的信息(value)和指向下一节点的指针，所以我们需要获取的就是这个value，但是要遍历所有节点，所以我们不可避免的需要用到这个指针。那么我们该如何反向输出整个链表呢？这时候链表的表亲=&gt;数组登场了，JS数组的API非常强大，本身属性方法中就有push、pop、unshift、shift等操作数组方法。既然题目要反向输出，而且链表是从头指向下一级，直到为null才结束，所以我们只要每次取到一个链表节点的时候，把它从数组的头部放入，也就是栈的思想，后进节点的永远在最前面，那么这样数组中就保存了整个反向链表，直接就能输出了！1234567891011121314/*function ListNode(x)&#123; this.val = x; this.next = null;&#125;*/function printListFromTailToHead(head)&#123; // write code here let arr = [] while(head) &#123; arr.unshift(head.val) head = head.next &#125; return arr&#125; 如有帮助，请收藏本博客，谢谢！]]></content>
      <categories>
        <category>剑指Offer系列</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[剑指Offer第二题：替换空格]]></title>
    <url>%2F2017%2F12%2F04%2F%E5%89%91%E6%8C%87-2%2F</url>
    <content type="text"><![CDATA[前言此系列为牛客网剑指Offer系列。撰写此博文只为记录点滴与总结。 替换空格请实现一个函数，将一个字符串中的空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。 JS中有一项非常强大的利器：正则，其中有专门对应空格的匹配，和替换的方法replace。1234567function replaceSpace(str)&#123; // write code here let reg = /\s/g str = str.replace(reg, "%20") return str&#125; 如有帮助，请收藏本博客，谢谢！]]></content>
      <categories>
        <category>剑指Offer系列</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[剑指Offer第一题：二维数组中的查找]]></title>
    <url>%2F2017%2F12%2F04%2F%E5%89%91%E6%8C%87-1%2F</url>
    <content type="text"><![CDATA[前言此系列为牛客网剑指Offer系列。撰写此博文只为记录点滴与总结。 二维数组中的查找在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。 一个二维数组并且内部排序是有序的，并且从左向右和从上至下都是递增的，那么也就是说每一行的最右边的元素会是最大的，此时只要拿这个数去与target作比较，就能去判断我下一步应该是换行，还是该在当前行去往前推，再去与target作比较，如此往复，就能去判断这个二维数组内部是否有target了。这种优势就是我没必要去遍历整个数组，节省很大的时间。说了这么多，还是上图比较容易理解，下面举例。 假设target为5，我们从这个二维数组的第一行的最右边(a15)去与target作比较，那么a15 &gt; 5，所以当前行往前推，a14 &gt; 5，再往前，直到a12 &lt; 5，所以要换一行，也就是b12与target作比较，这样往复去比较，就能知道这个二维数组中是否有target了。 12345678910111213141516function Find(target, array)&#123; // write code here let i = 0 let j = array[i].length - 1 while(i&lt;array.length &amp;&amp; j&gt;=0) &#123; if(array[i][j] &gt; target) &#123; j-- &#125;else if(array[i][j] &lt; target) &#123; i++ &#125;else &#123; return true; &#125; &#125; return false&#125; 如有帮助，请收藏本博客，谢谢！]]></content>
      <categories>
        <category>剑指Offer系列</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识Git与GitHub]]></title>
    <url>%2F2017%2F12%2F02%2F%E8%AE%A4%E8%AF%86Git%E4%B8%8EGitHub%2F</url>
    <content type="text"><![CDATA[前言&emsp;&emsp;GitHub 是一个面向开源及私有软件项目的托管平台，因为只支持Git作为唯一的版本库格式进行托管，故名 GitHub。 Git的安装 安装Node.js 在使用GitHub之前首先要安装Git 具体如何安装可以看这篇 GitHub初体验在进入GitHub官网，你首先要注册一个账号(ps:这个就是你个人账户，牢记！) 既然我们都已经迈出了第一步，是不是该体验起飞的感觉了！ Github仓库的创建不急，我们先进入主页我们会看到右边有这么一个大绿色按钮 毫不犹豫的按下它吧！！！这就是你以后经常需要触碰的仓库！ 因为我勾选了自动创建README，所以界面是这样的 好了，到了这一步说明已经成功了一半，仓库建好了，那么我们怎么才能把这远程仓库能clone到我们本地呢？仔细的你一定看到了又出现了一个大绿色按钮，没错，这就是我们的主角！点开它，你会发现右上角有个Use SSH(这是个切换按钮，记得切换到SSH) 那么问题来了，SSH是啥？我没有这玩意儿啊，该怎么办？不慌！这时候该我们的Git登场了！(blingbling滑稽) Git初体验 首先打开我们的Git Bash (安装成功) 因为Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识。 然后我们可以查看我们电脑中是否已经存在过ssh，打下面两条命令就能看到，我已经安装过，所以显示存在，没有安装是显示不存在的。 接下来我们安装SSH ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;(记得替换你自己的邮箱),把这句代码输进Git中，它先要求你确认保存公钥的位置（.ssh/id_rsa），然后它会让你重复一个密码两次，如果不想在使用公钥的时候输入密码，可以留空，一直按回车结束，就成功了。 现在只需要我们去ssh目录下的id_rsa.pub中的钥匙给复制出来然后粘贴到GitHub的SSH中就行了 回到GitHub中，点击我们的头像，然后下面会出现一个Settings。 如图点击New SSH key 好了，现在完成了我们的SSH创建，接下来我们就能clone我们的仓库到本地啦！ Clone仓库到本地 回到我们的clone按钮，切换到SSH，并且复制这段地址 选好你想放仓库的文件夹位置，并且右键点git bash here，输入git clone git@github.com:xxx/test.git(后面改成你们的地址哦) 然后静等仓库clone下来，然后就能愉快的玩耍GitHub啦！]]></content>
      <categories>
        <category>GitHub系列</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>GitHub</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
</search>
